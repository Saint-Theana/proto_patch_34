// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor.proto

#ifndef PROTOBUF_editor_2eproto__INCLUDED
#define PROTOBUF_editor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto {
class CellInfo;
class CellInfoDefaultTypeInternal;
extern CellInfoDefaultTypeInternal _CellInfo_default_instance_;
class MapInfo;
class MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_editor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_editor_2eproto

enum SceneSurfaceMaterial {
  Invalid = 0,
  Grass = 1,
  Dirt = 2,
  Rock = 3,
  Snow = 4,
  Water = 5,
  Tile = 6,
  Sand = 7,
  SceneSurfaceMaterial_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SceneSurfaceMaterial_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SceneSurfaceMaterial_IsValid(int value);
const SceneSurfaceMaterial SceneSurfaceMaterial_MIN = Invalid;
const SceneSurfaceMaterial SceneSurfaceMaterial_MAX = Sand;
const int SceneSurfaceMaterial_ARRAYSIZE = SceneSurfaceMaterial_MAX + 1;

const ::google::protobuf::EnumDescriptor* SceneSurfaceMaterial_descriptor();
inline const ::std::string& SceneSurfaceMaterial_Name(SceneSurfaceMaterial value) {
  return ::google::protobuf::internal::NameOfEnum(
    SceneSurfaceMaterial_descriptor(), value);
}
inline bool SceneSurfaceMaterial_Parse(
    const ::std::string& name, SceneSurfaceMaterial* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SceneSurfaceMaterial>(
    SceneSurfaceMaterial_descriptor(), name, value);
}
// ===================================================================

class MapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MapInfo) */ {
 public:
  MapInfo();
  virtual ~MapInfo();

  MapInfo(const MapInfo& from);

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();

  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapInfo* other);
  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.CellInfo cells = 5;
  int cells_size() const;
  void clear_cells();
  static const int kCellsFieldNumber = 5;
  const ::proto::CellInfo& cells(int index) const;
  ::proto::CellInfo* mutable_cells(int index);
  ::proto::CellInfo* add_cells();
  ::google::protobuf::RepeatedPtrField< ::proto::CellInfo >*
      mutable_cells();
  const ::google::protobuf::RepeatedPtrField< ::proto::CellInfo >&
      cells() const;

  // int32 minx = 1;
  void clear_minx();
  static const int kMinxFieldNumber = 1;
  ::google::protobuf::int32 minx() const;
  void set_minx(::google::protobuf::int32 value);

  // int32 maxx = 2;
  void clear_maxx();
  static const int kMaxxFieldNumber = 2;
  ::google::protobuf::int32 maxx() const;
  void set_maxx(::google::protobuf::int32 value);

  // int32 minz = 3;
  void clear_minz();
  static const int kMinzFieldNumber = 3;
  ::google::protobuf::int32 minz() const;
  void set_minz(::google::protobuf::int32 value);

  // int32 maxz = 4;
  void clear_maxz();
  static const int kMaxzFieldNumber = 4;
  ::google::protobuf::int32 maxz() const;
  void set_maxz(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.MapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::CellInfo > cells_;
  ::google::protobuf::int32 minx_;
  ::google::protobuf::int32 maxx_;
  ::google::protobuf::int32 minz_;
  ::google::protobuf::int32 maxz_;
  mutable int _cached_size_;
  friend struct protobuf_editor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CellInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CellInfo) */ {
 public:
  CellInfo();
  virtual ~CellInfo();

  CellInfo(const CellInfo& from);

  inline CellInfo& operator=(const CellInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CellInfo(CellInfo&& from) noexcept
    : CellInfo() {
    *this = ::std::move(from);
  }

  inline CellInfo& operator=(CellInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CellInfo& default_instance();

  static inline const CellInfo* internal_default_instance() {
    return reinterpret_cast<const CellInfo*>(
               &_CellInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CellInfo* other);
  friend void swap(CellInfo& a, CellInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CellInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CellInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CellInfo& from);
  void MergeFrom(const CellInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CellInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.SceneSurfaceMaterial type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::SceneSurfaceMaterial type() const;
  void set_type(::proto::SceneSurfaceMaterial value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.CellInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct protobuf_editor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapInfo

// int32 minx = 1;
inline void MapInfo::clear_minx() {
  minx_ = 0;
}
inline ::google::protobuf::int32 MapInfo::minx() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.minx)
  return minx_;
}
inline void MapInfo::set_minx(::google::protobuf::int32 value) {
  
  minx_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.minx)
}

// int32 maxx = 2;
inline void MapInfo::clear_maxx() {
  maxx_ = 0;
}
inline ::google::protobuf::int32 MapInfo::maxx() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.maxx)
  return maxx_;
}
inline void MapInfo::set_maxx(::google::protobuf::int32 value) {
  
  maxx_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.maxx)
}

// int32 minz = 3;
inline void MapInfo::clear_minz() {
  minz_ = 0;
}
inline ::google::protobuf::int32 MapInfo::minz() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.minz)
  return minz_;
}
inline void MapInfo::set_minz(::google::protobuf::int32 value) {
  
  minz_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.minz)
}

// int32 maxz = 4;
inline void MapInfo::clear_maxz() {
  maxz_ = 0;
}
inline ::google::protobuf::int32 MapInfo::maxz() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.maxz)
  return maxz_;
}
inline void MapInfo::set_maxz(::google::protobuf::int32 value) {
  
  maxz_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.maxz)
}

// repeated .proto.CellInfo cells = 5;
inline int MapInfo::cells_size() const {
  return cells_.size();
}
inline void MapInfo::clear_cells() {
  cells_.Clear();
}
inline const ::proto::CellInfo& MapInfo::cells(int index) const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.cells)
  return cells_.Get(index);
}
inline ::proto::CellInfo* MapInfo::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MapInfo.cells)
  return cells_.Mutable(index);
}
inline ::proto::CellInfo* MapInfo::add_cells() {
  // @@protoc_insertion_point(field_add:proto.MapInfo.cells)
  return cells_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::CellInfo >*
MapInfo::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:proto.MapInfo.cells)
  return &cells_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::CellInfo >&
MapInfo::cells() const {
  // @@protoc_insertion_point(field_list:proto.MapInfo.cells)
  return cells_;
}

// -------------------------------------------------------------------

// CellInfo

// .proto.SceneSurfaceMaterial type = 1;
inline void CellInfo::clear_type() {
  type_ = 0;
}
inline ::proto::SceneSurfaceMaterial CellInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.CellInfo.type)
  return static_cast< ::proto::SceneSurfaceMaterial >(type_);
}
inline void CellInfo::set_type(::proto::SceneSurfaceMaterial value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.CellInfo.type)
}

// int32 y = 2;
inline void CellInfo::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 CellInfo::y() const {
  // @@protoc_insertion_point(field_get:proto.CellInfo.y)
  return y_;
}
inline void CellInfo::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.CellInfo.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::SceneSurfaceMaterial> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SceneSurfaceMaterial>() {
  return ::proto::SceneSurfaceMaterial_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_editor_2eproto__INCLUDED
