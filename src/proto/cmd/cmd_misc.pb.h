// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_misc.proto

#ifndef PROTOBUF_cmd_2fcmd_5fmisc_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fmisc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
#include "cmd/cmd_social.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class ChangeServerGlobalValueNotify;
class ChangeServerGlobalValueNotifyDefaultTypeInternal;
extern ChangeServerGlobalValueNotifyDefaultTypeInternal _ChangeServerGlobalValueNotify_default_instance_;
class CheckSegmentCRCNotify;
class CheckSegmentCRCNotifyDefaultTypeInternal;
extern CheckSegmentCRCNotifyDefaultTypeInternal _CheckSegmentCRCNotify_default_instance_;
class CheckSegmentCRCReq;
class CheckSegmentCRCReqDefaultTypeInternal;
extern CheckSegmentCRCReqDefaultTypeInternal _CheckSegmentCRCReq_default_instance_;
class ClientBulletCreateNotify;
class ClientBulletCreateNotifyDefaultTypeInternal;
extern ClientBulletCreateNotifyDefaultTypeInternal _ClientBulletCreateNotify_default_instance_;
class ClientReconnectNotify;
class ClientReconnectNotifyDefaultTypeInternal;
extern ClientReconnectNotifyDefaultTypeInternal _ClientReconnectNotify_default_instance_;
class ClientReportNotify;
class ClientReportNotifyDefaultTypeInternal;
extern ClientReportNotifyDefaultTypeInternal _ClientReportNotify_default_instance_;
class EchoNotify;
class EchoNotifyDefaultTypeInternal;
extern EchoNotifyDefaultTypeInternal _EchoNotify_default_instance_;
class GetOnlinePlayerInfoReq;
class GetOnlinePlayerInfoReqDefaultTypeInternal;
extern GetOnlinePlayerInfoReqDefaultTypeInternal _GetOnlinePlayerInfoReq_default_instance_;
class GetOnlinePlayerInfoRsp;
class GetOnlinePlayerInfoRspDefaultTypeInternal;
extern GetOnlinePlayerInfoRspDefaultTypeInternal _GetOnlinePlayerInfoRsp_default_instance_;
class GetOnlinePlayerListReq;
class GetOnlinePlayerListReqDefaultTypeInternal;
extern GetOnlinePlayerListReqDefaultTypeInternal _GetOnlinePlayerListReq_default_instance_;
class GetOnlinePlayerListRsp;
class GetOnlinePlayerListRspDefaultTypeInternal;
extern GetOnlinePlayerListRspDefaultTypeInternal _GetOnlinePlayerListRsp_default_instance_;
class GmTalkNotify;
class GmTalkNotifyDefaultTypeInternal;
extern GmTalkNotifyDefaultTypeInternal _GmTalkNotify_default_instance_;
class GmTalkReq;
class GmTalkReqDefaultTypeInternal;
extern GmTalkReqDefaultTypeInternal _GmTalkReq_default_instance_;
class GmTalkRsp;
class GmTalkRspDefaultTypeInternal;
extern GmTalkRspDefaultTypeInternal _GmTalkRsp_default_instance_;
class KeepAliveNotify;
class KeepAliveNotifyDefaultTypeInternal;
extern KeepAliveNotifyDefaultTypeInternal _KeepAliveNotify_default_instance_;
class LastPacketPrintNotify;
class LastPacketPrintNotifyDefaultTypeInternal;
extern LastPacketPrintNotifyDefaultTypeInternal _LastPacketPrintNotify_default_instance_;
class MsgParam;
class MsgParamDefaultTypeInternal;
extern MsgParamDefaultTypeInternal _MsgParam_default_instance_;
class PingReq;
class PingReqDefaultTypeInternal;
extern PingReqDefaultTypeInternal _PingReq_default_instance_;
class PingRsp;
class PingRspDefaultTypeInternal;
extern PingRspDefaultTypeInternal _PingRsp_default_instance_;
class PlayerRTTInfo;
class PlayerRTTInfoDefaultTypeInternal;
extern PlayerRTTInfoDefaultTypeInternal _PlayerRTTInfo_default_instance_;
class RobotPushPlayerDataNotify;
class RobotPushPlayerDataNotifyDefaultTypeInternal;
extern RobotPushPlayerDataNotifyDefaultTypeInternal _RobotPushPlayerDataNotify_default_instance_;
class SegmentCRCInfo;
class SegmentCRCInfoDefaultTypeInternal;
extern SegmentCRCInfoDefaultTypeInternal _SegmentCRCInfo_default_instance_;
class SegmentInfo;
class SegmentInfoDefaultTypeInternal;
extern SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
class ServerLogNotify;
class ServerLogNotifyDefaultTypeInternal;
extern ServerLogNotifyDefaultTypeInternal _ServerLogNotify_default_instance_;
class ServerTimeNotify;
class ServerTimeNotifyDefaultTypeInternal;
extern ServerTimeNotifyDefaultTypeInternal _ServerTimeNotify_default_instance_;
class ShowMessageNotify;
class ShowMessageNotifyDefaultTypeInternal;
extern ShowMessageNotifyDefaultTypeInternal _ShowMessageNotify_default_instance_;
class UnionCmd;
class UnionCmdDefaultTypeInternal;
extern UnionCmdDefaultTypeInternal _UnionCmd_default_instance_;
class UnionCmdNotify;
class UnionCmdNotifyDefaultTypeInternal;
extern UnionCmdNotifyDefaultTypeInternal _UnionCmdNotify_default_instance_;
class UpdateRedPointNotify;
class UpdateRedPointNotifyDefaultTypeInternal;
extern UpdateRedPointNotifyDefaultTypeInternal _UpdateRedPointNotify_default_instance_;
class WorldPlayerRTTNotify;
class WorldPlayerRTTNotifyDefaultTypeInternal;
extern WorldPlayerRTTNotifyDefaultTypeInternal _WorldPlayerRTTNotify_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fmisc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fmisc_2eproto

enum KeepAliveNotify_CmdId {
  KeepAliveNotify_CmdId_NONE = 0,
  KeepAliveNotify_CmdId_CMD_ID = 72,
  KeepAliveNotify_CmdId_ENET_CHANNEL_ID = 0,
  KeepAliveNotify_CmdId_ENET_IS_RELIABLE = 1,
  KeepAliveNotify_CmdId_KeepAliveNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KeepAliveNotify_CmdId_KeepAliveNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KeepAliveNotify_CmdId_IsValid(int value);
const KeepAliveNotify_CmdId KeepAliveNotify_CmdId_CmdId_MIN = KeepAliveNotify_CmdId_NONE;
const KeepAliveNotify_CmdId KeepAliveNotify_CmdId_CmdId_MAX = KeepAliveNotify_CmdId_CMD_ID;
const int KeepAliveNotify_CmdId_CmdId_ARRAYSIZE = KeepAliveNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeepAliveNotify_CmdId_descriptor();
inline const ::std::string& KeepAliveNotify_CmdId_Name(KeepAliveNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeepAliveNotify_CmdId_descriptor(), value);
}
inline bool KeepAliveNotify_CmdId_Parse(
    const ::std::string& name, KeepAliveNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeepAliveNotify_CmdId>(
    KeepAliveNotify_CmdId_descriptor(), name, value);
}
enum GmTalkReq_CmdId {
  GmTalkReq_CmdId_NONE = 0,
  GmTalkReq_CmdId_CMD_ID = 98,
  GmTalkReq_CmdId_ENET_CHANNEL_ID = 0,
  GmTalkReq_CmdId_ENET_IS_RELIABLE = 1,
  GmTalkReq_CmdId_IS_ALLOW_CLIENT = 1,
  GmTalkReq_CmdId_GmTalkReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GmTalkReq_CmdId_GmTalkReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GmTalkReq_CmdId_IsValid(int value);
const GmTalkReq_CmdId GmTalkReq_CmdId_CmdId_MIN = GmTalkReq_CmdId_NONE;
const GmTalkReq_CmdId GmTalkReq_CmdId_CmdId_MAX = GmTalkReq_CmdId_CMD_ID;
const int GmTalkReq_CmdId_CmdId_ARRAYSIZE = GmTalkReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GmTalkReq_CmdId_descriptor();
inline const ::std::string& GmTalkReq_CmdId_Name(GmTalkReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GmTalkReq_CmdId_descriptor(), value);
}
inline bool GmTalkReq_CmdId_Parse(
    const ::std::string& name, GmTalkReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GmTalkReq_CmdId>(
    GmTalkReq_CmdId_descriptor(), name, value);
}
enum GmTalkRsp_CmdId {
  GmTalkRsp_CmdId_NONE = 0,
  GmTalkRsp_CmdId_CMD_ID = 12,
  GmTalkRsp_CmdId_ENET_CHANNEL_ID = 0,
  GmTalkRsp_CmdId_ENET_IS_RELIABLE = 1,
  GmTalkRsp_CmdId_GmTalkRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GmTalkRsp_CmdId_GmTalkRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GmTalkRsp_CmdId_IsValid(int value);
const GmTalkRsp_CmdId GmTalkRsp_CmdId_CmdId_MIN = GmTalkRsp_CmdId_NONE;
const GmTalkRsp_CmdId GmTalkRsp_CmdId_CmdId_MAX = GmTalkRsp_CmdId_CMD_ID;
const int GmTalkRsp_CmdId_CmdId_ARRAYSIZE = GmTalkRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GmTalkRsp_CmdId_descriptor();
inline const ::std::string& GmTalkRsp_CmdId_Name(GmTalkRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GmTalkRsp_CmdId_descriptor(), value);
}
inline bool GmTalkRsp_CmdId_Parse(
    const ::std::string& name, GmTalkRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GmTalkRsp_CmdId>(
    GmTalkRsp_CmdId_descriptor(), name, value);
}
enum ShowMessageNotify_CmdId {
  ShowMessageNotify_CmdId_NONE = 0,
  ShowMessageNotify_CmdId_CMD_ID = 35,
  ShowMessageNotify_CmdId_ENET_CHANNEL_ID = 0,
  ShowMessageNotify_CmdId_ENET_IS_RELIABLE = 1,
  ShowMessageNotify_CmdId_ShowMessageNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ShowMessageNotify_CmdId_ShowMessageNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ShowMessageNotify_CmdId_IsValid(int value);
const ShowMessageNotify_CmdId ShowMessageNotify_CmdId_CmdId_MIN = ShowMessageNotify_CmdId_NONE;
const ShowMessageNotify_CmdId ShowMessageNotify_CmdId_CmdId_MAX = ShowMessageNotify_CmdId_CMD_ID;
const int ShowMessageNotify_CmdId_CmdId_ARRAYSIZE = ShowMessageNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShowMessageNotify_CmdId_descriptor();
inline const ::std::string& ShowMessageNotify_CmdId_Name(ShowMessageNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShowMessageNotify_CmdId_descriptor(), value);
}
inline bool ShowMessageNotify_CmdId_Parse(
    const ::std::string& name, ShowMessageNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShowMessageNotify_CmdId>(
    ShowMessageNotify_CmdId_descriptor(), name, value);
}
enum PingReq_CmdId {
  PingReq_CmdId_NONE = 0,
  PingReq_CmdId_CMD_ID = 7,
  PingReq_CmdId_ENET_CHANNEL_ID = 0,
  PingReq_CmdId_ENET_IS_RELIABLE = 1,
  PingReq_CmdId_IS_ALLOW_CLIENT = 1,
  PingReq_CmdId_PingReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PingReq_CmdId_PingReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PingReq_CmdId_IsValid(int value);
const PingReq_CmdId PingReq_CmdId_CmdId_MIN = PingReq_CmdId_NONE;
const PingReq_CmdId PingReq_CmdId_CmdId_MAX = PingReq_CmdId_CMD_ID;
const int PingReq_CmdId_CmdId_ARRAYSIZE = PingReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PingReq_CmdId_descriptor();
inline const ::std::string& PingReq_CmdId_Name(PingReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PingReq_CmdId_descriptor(), value);
}
inline bool PingReq_CmdId_Parse(
    const ::std::string& name, PingReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PingReq_CmdId>(
    PingReq_CmdId_descriptor(), name, value);
}
enum PingRsp_CmdId {
  PingRsp_CmdId_NONE = 0,
  PingRsp_CmdId_CMD_ID = 21,
  PingRsp_CmdId_ENET_CHANNEL_ID = 0,
  PingRsp_CmdId_ENET_IS_RELIABLE = 1,
  PingRsp_CmdId_PingRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PingRsp_CmdId_PingRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PingRsp_CmdId_IsValid(int value);
const PingRsp_CmdId PingRsp_CmdId_CmdId_MIN = PingRsp_CmdId_NONE;
const PingRsp_CmdId PingRsp_CmdId_CmdId_MAX = PingRsp_CmdId_CMD_ID;
const int PingRsp_CmdId_CmdId_ARRAYSIZE = PingRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* PingRsp_CmdId_descriptor();
inline const ::std::string& PingRsp_CmdId_Name(PingRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    PingRsp_CmdId_descriptor(), value);
}
inline bool PingRsp_CmdId_Parse(
    const ::std::string& name, PingRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PingRsp_CmdId>(
    PingRsp_CmdId_descriptor(), name, value);
}
enum GetOnlinePlayerListReq_CmdId {
  GetOnlinePlayerListReq_CmdId_NONE = 0,
  GetOnlinePlayerListReq_CmdId_CMD_ID = 90,
  GetOnlinePlayerListReq_CmdId_ENET_CHANNEL_ID = 0,
  GetOnlinePlayerListReq_CmdId_ENET_IS_RELIABLE = 1,
  GetOnlinePlayerListReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetOnlinePlayerListReq_CmdId_GetOnlinePlayerListReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetOnlinePlayerListReq_CmdId_GetOnlinePlayerListReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetOnlinePlayerListReq_CmdId_IsValid(int value);
const GetOnlinePlayerListReq_CmdId GetOnlinePlayerListReq_CmdId_CmdId_MIN = GetOnlinePlayerListReq_CmdId_NONE;
const GetOnlinePlayerListReq_CmdId GetOnlinePlayerListReq_CmdId_CmdId_MAX = GetOnlinePlayerListReq_CmdId_CMD_ID;
const int GetOnlinePlayerListReq_CmdId_CmdId_ARRAYSIZE = GetOnlinePlayerListReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetOnlinePlayerListReq_CmdId_descriptor();
inline const ::std::string& GetOnlinePlayerListReq_CmdId_Name(GetOnlinePlayerListReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetOnlinePlayerListReq_CmdId_descriptor(), value);
}
inline bool GetOnlinePlayerListReq_CmdId_Parse(
    const ::std::string& name, GetOnlinePlayerListReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetOnlinePlayerListReq_CmdId>(
    GetOnlinePlayerListReq_CmdId_descriptor(), name, value);
}
enum GetOnlinePlayerListRsp_CmdId {
  GetOnlinePlayerListRsp_CmdId_NONE = 0,
  GetOnlinePlayerListRsp_CmdId_CMD_ID = 73,
  GetOnlinePlayerListRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetOnlinePlayerListRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetOnlinePlayerListRsp_CmdId_GetOnlinePlayerListRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetOnlinePlayerListRsp_CmdId_GetOnlinePlayerListRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetOnlinePlayerListRsp_CmdId_IsValid(int value);
const GetOnlinePlayerListRsp_CmdId GetOnlinePlayerListRsp_CmdId_CmdId_MIN = GetOnlinePlayerListRsp_CmdId_NONE;
const GetOnlinePlayerListRsp_CmdId GetOnlinePlayerListRsp_CmdId_CmdId_MAX = GetOnlinePlayerListRsp_CmdId_CMD_ID;
const int GetOnlinePlayerListRsp_CmdId_CmdId_ARRAYSIZE = GetOnlinePlayerListRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetOnlinePlayerListRsp_CmdId_descriptor();
inline const ::std::string& GetOnlinePlayerListRsp_CmdId_Name(GetOnlinePlayerListRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetOnlinePlayerListRsp_CmdId_descriptor(), value);
}
inline bool GetOnlinePlayerListRsp_CmdId_Parse(
    const ::std::string& name, GetOnlinePlayerListRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetOnlinePlayerListRsp_CmdId>(
    GetOnlinePlayerListRsp_CmdId_descriptor(), name, value);
}
enum ServerTimeNotify_CmdId {
  ServerTimeNotify_CmdId_NONE = 0,
  ServerTimeNotify_CmdId_CMD_ID = 99,
  ServerTimeNotify_CmdId_ENET_CHANNEL_ID = 1,
  ServerTimeNotify_CmdId_ENET_IS_RELIABLE = 1,
  ServerTimeNotify_CmdId_ServerTimeNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerTimeNotify_CmdId_ServerTimeNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerTimeNotify_CmdId_IsValid(int value);
const ServerTimeNotify_CmdId ServerTimeNotify_CmdId_CmdId_MIN = ServerTimeNotify_CmdId_NONE;
const ServerTimeNotify_CmdId ServerTimeNotify_CmdId_CmdId_MAX = ServerTimeNotify_CmdId_CMD_ID;
const int ServerTimeNotify_CmdId_CmdId_ARRAYSIZE = ServerTimeNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerTimeNotify_CmdId_descriptor();
inline const ::std::string& ServerTimeNotify_CmdId_Name(ServerTimeNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerTimeNotify_CmdId_descriptor(), value);
}
inline bool ServerTimeNotify_CmdId_Parse(
    const ::std::string& name, ServerTimeNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerTimeNotify_CmdId>(
    ServerTimeNotify_CmdId_descriptor(), name, value);
}
enum ServerLogNotify_CmdId {
  ServerLogNotify_CmdId_NONE = 0,
  ServerLogNotify_CmdId_CMD_ID = 31,
  ServerLogNotify_CmdId_ENET_CHANNEL_ID = 1,
  ServerLogNotify_CmdId_ENET_IS_RELIABLE = 1,
  ServerLogNotify_CmdId_ServerLogNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerLogNotify_CmdId_ServerLogNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerLogNotify_CmdId_IsValid(int value);
const ServerLogNotify_CmdId ServerLogNotify_CmdId_CmdId_MIN = ServerLogNotify_CmdId_NONE;
const ServerLogNotify_CmdId ServerLogNotify_CmdId_CmdId_MAX = ServerLogNotify_CmdId_CMD_ID;
const int ServerLogNotify_CmdId_CmdId_ARRAYSIZE = ServerLogNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerLogNotify_CmdId_descriptor();
inline const ::std::string& ServerLogNotify_CmdId_Name(ServerLogNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerLogNotify_CmdId_descriptor(), value);
}
inline bool ServerLogNotify_CmdId_Parse(
    const ::std::string& name, ServerLogNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerLogNotify_CmdId>(
    ServerLogNotify_CmdId_descriptor(), name, value);
}
enum ClientReconnectNotify_CmdId {
  ClientReconnectNotify_CmdId_NONE = 0,
  ClientReconnectNotify_CmdId_CMD_ID = 75,
  ClientReconnectNotify_CmdId_ENET_CHANNEL_ID = 0,
  ClientReconnectNotify_CmdId_ENET_IS_RELIABLE = 1,
  ClientReconnectNotify_CmdId_ClientReconnectNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientReconnectNotify_CmdId_ClientReconnectNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientReconnectNotify_CmdId_IsValid(int value);
const ClientReconnectNotify_CmdId ClientReconnectNotify_CmdId_CmdId_MIN = ClientReconnectNotify_CmdId_NONE;
const ClientReconnectNotify_CmdId ClientReconnectNotify_CmdId_CmdId_MAX = ClientReconnectNotify_CmdId_CMD_ID;
const int ClientReconnectNotify_CmdId_CmdId_ARRAYSIZE = ClientReconnectNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientReconnectNotify_CmdId_descriptor();
inline const ::std::string& ClientReconnectNotify_CmdId_Name(ClientReconnectNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientReconnectNotify_CmdId_descriptor(), value);
}
inline bool ClientReconnectNotify_CmdId_Parse(
    const ::std::string& name, ClientReconnectNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientReconnectNotify_CmdId>(
    ClientReconnectNotify_CmdId_descriptor(), name, value);
}
enum RobotPushPlayerDataNotify_CmdId {
  RobotPushPlayerDataNotify_CmdId_NONE = 0,
  RobotPushPlayerDataNotify_CmdId_CMD_ID = 97,
  RobotPushPlayerDataNotify_CmdId_ENET_CHANNEL_ID = 0,
  RobotPushPlayerDataNotify_CmdId_ENET_IS_RELIABLE = 1,
  RobotPushPlayerDataNotify_CmdId_RobotPushPlayerDataNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RobotPushPlayerDataNotify_CmdId_RobotPushPlayerDataNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RobotPushPlayerDataNotify_CmdId_IsValid(int value);
const RobotPushPlayerDataNotify_CmdId RobotPushPlayerDataNotify_CmdId_CmdId_MIN = RobotPushPlayerDataNotify_CmdId_NONE;
const RobotPushPlayerDataNotify_CmdId RobotPushPlayerDataNotify_CmdId_CmdId_MAX = RobotPushPlayerDataNotify_CmdId_CMD_ID;
const int RobotPushPlayerDataNotify_CmdId_CmdId_ARRAYSIZE = RobotPushPlayerDataNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotPushPlayerDataNotify_CmdId_descriptor();
inline const ::std::string& RobotPushPlayerDataNotify_CmdId_Name(RobotPushPlayerDataNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotPushPlayerDataNotify_CmdId_descriptor(), value);
}
inline bool RobotPushPlayerDataNotify_CmdId_Parse(
    const ::std::string& name, RobotPushPlayerDataNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotPushPlayerDataNotify_CmdId>(
    RobotPushPlayerDataNotify_CmdId_descriptor(), name, value);
}
enum ClientReportNotify_CmdId {
  ClientReportNotify_CmdId_NONE = 0,
  ClientReportNotify_CmdId_CMD_ID = 81,
  ClientReportNotify_CmdId_ENET_CHANNEL_ID = 0,
  ClientReportNotify_CmdId_ENET_IS_RELIABLE = 1,
  ClientReportNotify_CmdId_IS_ALLOW_CLIENT = 1,
  ClientReportNotify_CmdId_ClientReportNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientReportNotify_CmdId_ClientReportNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientReportNotify_CmdId_IsValid(int value);
const ClientReportNotify_CmdId ClientReportNotify_CmdId_CmdId_MIN = ClientReportNotify_CmdId_NONE;
const ClientReportNotify_CmdId ClientReportNotify_CmdId_CmdId_MAX = ClientReportNotify_CmdId_CMD_ID;
const int ClientReportNotify_CmdId_CmdId_ARRAYSIZE = ClientReportNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientReportNotify_CmdId_descriptor();
inline const ::std::string& ClientReportNotify_CmdId_Name(ClientReportNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientReportNotify_CmdId_descriptor(), value);
}
inline bool ClientReportNotify_CmdId_Parse(
    const ::std::string& name, ClientReportNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientReportNotify_CmdId>(
    ClientReportNotify_CmdId_descriptor(), name, value);
}
enum UnionCmdNotify_CmdId {
  UnionCmdNotify_CmdId_NONE = 0,
  UnionCmdNotify_CmdId_CMD_ID = 5,
  UnionCmdNotify_CmdId_ENET_CHANNEL_ID = 0,
  UnionCmdNotify_CmdId_ENET_IS_RELIABLE = 1,
  UnionCmdNotify_CmdId_IS_ALLOW_CLIENT = 1,
  UnionCmdNotify_CmdId_UnionCmdNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UnionCmdNotify_CmdId_UnionCmdNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UnionCmdNotify_CmdId_IsValid(int value);
const UnionCmdNotify_CmdId UnionCmdNotify_CmdId_CmdId_MIN = UnionCmdNotify_CmdId_NONE;
const UnionCmdNotify_CmdId UnionCmdNotify_CmdId_CmdId_MAX = UnionCmdNotify_CmdId_CMD_ID;
const int UnionCmdNotify_CmdId_CmdId_ARRAYSIZE = UnionCmdNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnionCmdNotify_CmdId_descriptor();
inline const ::std::string& UnionCmdNotify_CmdId_Name(UnionCmdNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnionCmdNotify_CmdId_descriptor(), value);
}
inline bool UnionCmdNotify_CmdId_Parse(
    const ::std::string& name, UnionCmdNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnionCmdNotify_CmdId>(
    UnionCmdNotify_CmdId_descriptor(), name, value);
}
enum GetOnlinePlayerInfoReq_CmdId {
  GetOnlinePlayerInfoReq_CmdId_NONE = 0,
  GetOnlinePlayerInfoReq_CmdId_CMD_ID = 82,
  GetOnlinePlayerInfoReq_CmdId_ENET_CHANNEL_ID = 0,
  GetOnlinePlayerInfoReq_CmdId_ENET_IS_RELIABLE = 1,
  GetOnlinePlayerInfoReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetOnlinePlayerInfoReq_CmdId_GetOnlinePlayerInfoReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetOnlinePlayerInfoReq_CmdId_GetOnlinePlayerInfoReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetOnlinePlayerInfoReq_CmdId_IsValid(int value);
const GetOnlinePlayerInfoReq_CmdId GetOnlinePlayerInfoReq_CmdId_CmdId_MIN = GetOnlinePlayerInfoReq_CmdId_NONE;
const GetOnlinePlayerInfoReq_CmdId GetOnlinePlayerInfoReq_CmdId_CmdId_MAX = GetOnlinePlayerInfoReq_CmdId_CMD_ID;
const int GetOnlinePlayerInfoReq_CmdId_CmdId_ARRAYSIZE = GetOnlinePlayerInfoReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetOnlinePlayerInfoReq_CmdId_descriptor();
inline const ::std::string& GetOnlinePlayerInfoReq_CmdId_Name(GetOnlinePlayerInfoReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetOnlinePlayerInfoReq_CmdId_descriptor(), value);
}
inline bool GetOnlinePlayerInfoReq_CmdId_Parse(
    const ::std::string& name, GetOnlinePlayerInfoReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetOnlinePlayerInfoReq_CmdId>(
    GetOnlinePlayerInfoReq_CmdId_descriptor(), name, value);
}
enum GetOnlinePlayerInfoRsp_CmdId {
  GetOnlinePlayerInfoRsp_CmdId_NONE = 0,
  GetOnlinePlayerInfoRsp_CmdId_CMD_ID = 47,
  GetOnlinePlayerInfoRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetOnlinePlayerInfoRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetOnlinePlayerInfoRsp_CmdId_GetOnlinePlayerInfoRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetOnlinePlayerInfoRsp_CmdId_GetOnlinePlayerInfoRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetOnlinePlayerInfoRsp_CmdId_IsValid(int value);
const GetOnlinePlayerInfoRsp_CmdId GetOnlinePlayerInfoRsp_CmdId_CmdId_MIN = GetOnlinePlayerInfoRsp_CmdId_NONE;
const GetOnlinePlayerInfoRsp_CmdId GetOnlinePlayerInfoRsp_CmdId_CmdId_MAX = GetOnlinePlayerInfoRsp_CmdId_CMD_ID;
const int GetOnlinePlayerInfoRsp_CmdId_CmdId_ARRAYSIZE = GetOnlinePlayerInfoRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetOnlinePlayerInfoRsp_CmdId_descriptor();
inline const ::std::string& GetOnlinePlayerInfoRsp_CmdId_Name(GetOnlinePlayerInfoRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetOnlinePlayerInfoRsp_CmdId_descriptor(), value);
}
inline bool GetOnlinePlayerInfoRsp_CmdId_Parse(
    const ::std::string& name, GetOnlinePlayerInfoRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetOnlinePlayerInfoRsp_CmdId>(
    GetOnlinePlayerInfoRsp_CmdId_descriptor(), name, value);
}
enum CheckSegmentCRCNotify_CmdId {
  CheckSegmentCRCNotify_CmdId_NONE = 0,
  CheckSegmentCRCNotify_CmdId_CMD_ID = 39,
  CheckSegmentCRCNotify_CmdId_ENET_CHANNEL_ID = 0,
  CheckSegmentCRCNotify_CmdId_ENET_IS_RELIABLE = 1,
  CheckSegmentCRCNotify_CmdId_CheckSegmentCRCNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CheckSegmentCRCNotify_CmdId_CheckSegmentCRCNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CheckSegmentCRCNotify_CmdId_IsValid(int value);
const CheckSegmentCRCNotify_CmdId CheckSegmentCRCNotify_CmdId_CmdId_MIN = CheckSegmentCRCNotify_CmdId_NONE;
const CheckSegmentCRCNotify_CmdId CheckSegmentCRCNotify_CmdId_CmdId_MAX = CheckSegmentCRCNotify_CmdId_CMD_ID;
const int CheckSegmentCRCNotify_CmdId_CmdId_ARRAYSIZE = CheckSegmentCRCNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* CheckSegmentCRCNotify_CmdId_descriptor();
inline const ::std::string& CheckSegmentCRCNotify_CmdId_Name(CheckSegmentCRCNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    CheckSegmentCRCNotify_CmdId_descriptor(), value);
}
inline bool CheckSegmentCRCNotify_CmdId_Parse(
    const ::std::string& name, CheckSegmentCRCNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CheckSegmentCRCNotify_CmdId>(
    CheckSegmentCRCNotify_CmdId_descriptor(), name, value);
}
enum CheckSegmentCRCReq_CmdId {
  CheckSegmentCRCReq_CmdId_NONE = 0,
  CheckSegmentCRCReq_CmdId_CMD_ID = 53,
  CheckSegmentCRCReq_CmdId_ENET_CHANNEL_ID = 0,
  CheckSegmentCRCReq_CmdId_ENET_IS_RELIABLE = 1,
  CheckSegmentCRCReq_CmdId_IS_ALLOW_CLIENT = 1,
  CheckSegmentCRCReq_CmdId_CheckSegmentCRCReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CheckSegmentCRCReq_CmdId_CheckSegmentCRCReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CheckSegmentCRCReq_CmdId_IsValid(int value);
const CheckSegmentCRCReq_CmdId CheckSegmentCRCReq_CmdId_CmdId_MIN = CheckSegmentCRCReq_CmdId_NONE;
const CheckSegmentCRCReq_CmdId CheckSegmentCRCReq_CmdId_CmdId_MAX = CheckSegmentCRCReq_CmdId_CMD_ID;
const int CheckSegmentCRCReq_CmdId_CmdId_ARRAYSIZE = CheckSegmentCRCReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* CheckSegmentCRCReq_CmdId_descriptor();
inline const ::std::string& CheckSegmentCRCReq_CmdId_Name(CheckSegmentCRCReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    CheckSegmentCRCReq_CmdId_descriptor(), value);
}
inline bool CheckSegmentCRCReq_CmdId_Parse(
    const ::std::string& name, CheckSegmentCRCReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CheckSegmentCRCReq_CmdId>(
    CheckSegmentCRCReq_CmdId_descriptor(), name, value);
}
enum WorldPlayerRTTNotify_CmdId {
  WorldPlayerRTTNotify_CmdId_NONE = 0,
  WorldPlayerRTTNotify_CmdId_CMD_ID = 22,
  WorldPlayerRTTNotify_CmdId_ENET_CHANNEL_ID = 0,
  WorldPlayerRTTNotify_CmdId_ENET_IS_RELIABLE = 1,
  WorldPlayerRTTNotify_CmdId_WorldPlayerRTTNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WorldPlayerRTTNotify_CmdId_WorldPlayerRTTNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WorldPlayerRTTNotify_CmdId_IsValid(int value);
const WorldPlayerRTTNotify_CmdId WorldPlayerRTTNotify_CmdId_CmdId_MIN = WorldPlayerRTTNotify_CmdId_NONE;
const WorldPlayerRTTNotify_CmdId WorldPlayerRTTNotify_CmdId_CmdId_MAX = WorldPlayerRTTNotify_CmdId_CMD_ID;
const int WorldPlayerRTTNotify_CmdId_CmdId_ARRAYSIZE = WorldPlayerRTTNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorldPlayerRTTNotify_CmdId_descriptor();
inline const ::std::string& WorldPlayerRTTNotify_CmdId_Name(WorldPlayerRTTNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorldPlayerRTTNotify_CmdId_descriptor(), value);
}
inline bool WorldPlayerRTTNotify_CmdId_Parse(
    const ::std::string& name, WorldPlayerRTTNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorldPlayerRTTNotify_CmdId>(
    WorldPlayerRTTNotify_CmdId_descriptor(), name, value);
}
enum EchoNotify_CmdId {
  EchoNotify_CmdId_NONE = 0,
  EchoNotify_CmdId_CMD_ID = 65,
  EchoNotify_CmdId_ENET_CHANNEL_ID = 0,
  EchoNotify_CmdId_ENET_IS_RELIABLE = 1,
  EchoNotify_CmdId_EchoNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EchoNotify_CmdId_EchoNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EchoNotify_CmdId_IsValid(int value);
const EchoNotify_CmdId EchoNotify_CmdId_CmdId_MIN = EchoNotify_CmdId_NONE;
const EchoNotify_CmdId EchoNotify_CmdId_CmdId_MAX = EchoNotify_CmdId_CMD_ID;
const int EchoNotify_CmdId_CmdId_ARRAYSIZE = EchoNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* EchoNotify_CmdId_descriptor();
inline const ::std::string& EchoNotify_CmdId_Name(EchoNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    EchoNotify_CmdId_descriptor(), value);
}
inline bool EchoNotify_CmdId_Parse(
    const ::std::string& name, EchoNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EchoNotify_CmdId>(
    EchoNotify_CmdId_descriptor(), name, value);
}
enum UpdateRedPointNotify_CmdId {
  UpdateRedPointNotify_CmdId_NONE = 0,
  UpdateRedPointNotify_CmdId_CMD_ID = 93,
  UpdateRedPointNotify_CmdId_ENET_CHANNEL_ID = 0,
  UpdateRedPointNotify_CmdId_ENET_IS_RELIABLE = 1,
  UpdateRedPointNotify_CmdId_UpdateRedPointNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UpdateRedPointNotify_CmdId_UpdateRedPointNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UpdateRedPointNotify_CmdId_IsValid(int value);
const UpdateRedPointNotify_CmdId UpdateRedPointNotify_CmdId_CmdId_MIN = UpdateRedPointNotify_CmdId_NONE;
const UpdateRedPointNotify_CmdId UpdateRedPointNotify_CmdId_CmdId_MAX = UpdateRedPointNotify_CmdId_CMD_ID;
const int UpdateRedPointNotify_CmdId_CmdId_ARRAYSIZE = UpdateRedPointNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateRedPointNotify_CmdId_descriptor();
inline const ::std::string& UpdateRedPointNotify_CmdId_Name(UpdateRedPointNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateRedPointNotify_CmdId_descriptor(), value);
}
inline bool UpdateRedPointNotify_CmdId_Parse(
    const ::std::string& name, UpdateRedPointNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateRedPointNotify_CmdId>(
    UpdateRedPointNotify_CmdId_descriptor(), name, value);
}
enum ClientBulletCreateNotify_CmdId {
  ClientBulletCreateNotify_CmdId_NONE = 0,
  ClientBulletCreateNotify_CmdId_CMD_ID = 4,
  ClientBulletCreateNotify_CmdId_ENET_CHANNEL_ID = 0,
  ClientBulletCreateNotify_CmdId_ENET_IS_RELIABLE = 1,
  ClientBulletCreateNotify_CmdId_IS_ALLOW_CLIENT = 1,
  ClientBulletCreateNotify_CmdId_ClientBulletCreateNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientBulletCreateNotify_CmdId_ClientBulletCreateNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientBulletCreateNotify_CmdId_IsValid(int value);
const ClientBulletCreateNotify_CmdId ClientBulletCreateNotify_CmdId_CmdId_MIN = ClientBulletCreateNotify_CmdId_NONE;
const ClientBulletCreateNotify_CmdId ClientBulletCreateNotify_CmdId_CmdId_MAX = ClientBulletCreateNotify_CmdId_CMD_ID;
const int ClientBulletCreateNotify_CmdId_CmdId_ARRAYSIZE = ClientBulletCreateNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientBulletCreateNotify_CmdId_descriptor();
inline const ::std::string& ClientBulletCreateNotify_CmdId_Name(ClientBulletCreateNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientBulletCreateNotify_CmdId_descriptor(), value);
}
inline bool ClientBulletCreateNotify_CmdId_Parse(
    const ::std::string& name, ClientBulletCreateNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientBulletCreateNotify_CmdId>(
    ClientBulletCreateNotify_CmdId_descriptor(), name, value);
}
enum ChangeServerGlobalValueNotify_CmdId {
  ChangeServerGlobalValueNotify_CmdId_NONE = 0,
  ChangeServerGlobalValueNotify_CmdId_CMD_ID = 27,
  ChangeServerGlobalValueNotify_CmdId_ENET_CHANNEL_ID = 0,
  ChangeServerGlobalValueNotify_CmdId_ENET_IS_RELIABLE = 1,
  ChangeServerGlobalValueNotify_CmdId_IS_ALLOW_CLIENT = 1,
  ChangeServerGlobalValueNotify_CmdId_ChangeServerGlobalValueNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChangeServerGlobalValueNotify_CmdId_ChangeServerGlobalValueNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChangeServerGlobalValueNotify_CmdId_IsValid(int value);
const ChangeServerGlobalValueNotify_CmdId ChangeServerGlobalValueNotify_CmdId_CmdId_MIN = ChangeServerGlobalValueNotify_CmdId_NONE;
const ChangeServerGlobalValueNotify_CmdId ChangeServerGlobalValueNotify_CmdId_CmdId_MAX = ChangeServerGlobalValueNotify_CmdId_CMD_ID;
const int ChangeServerGlobalValueNotify_CmdId_CmdId_ARRAYSIZE = ChangeServerGlobalValueNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeServerGlobalValueNotify_CmdId_descriptor();
inline const ::std::string& ChangeServerGlobalValueNotify_CmdId_Name(ChangeServerGlobalValueNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeServerGlobalValueNotify_CmdId_descriptor(), value);
}
inline bool ChangeServerGlobalValueNotify_CmdId_Parse(
    const ::std::string& name, ChangeServerGlobalValueNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeServerGlobalValueNotify_CmdId>(
    ChangeServerGlobalValueNotify_CmdId_descriptor(), name, value);
}
enum GmTalkNotify_CmdId {
  GmTalkNotify_CmdId_NONE = 0,
  GmTalkNotify_CmdId_CMD_ID = 94,
  GmTalkNotify_CmdId_ENET_CHANNEL_ID = 0,
  GmTalkNotify_CmdId_ENET_IS_RELIABLE = 1,
  GmTalkNotify_CmdId_GmTalkNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GmTalkNotify_CmdId_GmTalkNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GmTalkNotify_CmdId_IsValid(int value);
const GmTalkNotify_CmdId GmTalkNotify_CmdId_CmdId_MIN = GmTalkNotify_CmdId_NONE;
const GmTalkNotify_CmdId GmTalkNotify_CmdId_CmdId_MAX = GmTalkNotify_CmdId_CMD_ID;
const int GmTalkNotify_CmdId_CmdId_ARRAYSIZE = GmTalkNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GmTalkNotify_CmdId_descriptor();
inline const ::std::string& GmTalkNotify_CmdId_Name(GmTalkNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GmTalkNotify_CmdId_descriptor(), value);
}
inline bool GmTalkNotify_CmdId_Parse(
    const ::std::string& name, GmTalkNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GmTalkNotify_CmdId>(
    GmTalkNotify_CmdId_descriptor(), name, value);
}
enum LastPacketPrintNotify_CmdId {
  LastPacketPrintNotify_CmdId_NONE = 0,
  LastPacketPrintNotify_CmdId_CMD_ID = 88,
  LastPacketPrintNotify_CmdId_ENET_CHANNEL_ID = 0,
  LastPacketPrintNotify_CmdId_ENET_IS_RELIABLE = 1,
  LastPacketPrintNotify_CmdId_IS_ALLOW_CLIENT = 1,
  LastPacketPrintNotify_CmdId_LastPacketPrintNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LastPacketPrintNotify_CmdId_LastPacketPrintNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LastPacketPrintNotify_CmdId_IsValid(int value);
const LastPacketPrintNotify_CmdId LastPacketPrintNotify_CmdId_CmdId_MIN = LastPacketPrintNotify_CmdId_NONE;
const LastPacketPrintNotify_CmdId LastPacketPrintNotify_CmdId_CmdId_MAX = LastPacketPrintNotify_CmdId_CMD_ID;
const int LastPacketPrintNotify_CmdId_CmdId_ARRAYSIZE = LastPacketPrintNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* LastPacketPrintNotify_CmdId_descriptor();
inline const ::std::string& LastPacketPrintNotify_CmdId_Name(LastPacketPrintNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    LastPacketPrintNotify_CmdId_descriptor(), value);
}
inline bool LastPacketPrintNotify_CmdId_Parse(
    const ::std::string& name, LastPacketPrintNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LastPacketPrintNotify_CmdId>(
    LastPacketPrintNotify_CmdId_descriptor(), name, value);
}
enum SvrMsgId {
  MSG_UNKNOWN = 0,
  MSG_BLOCK_REFRESH_COUNTDOWN = 1,
  MSG_AVATAR_REVIVE_BY_STATUE = 2,
  MSG_DAILY_TASK_REWARD_MAX_NUM = 3,
  MSG_ROUTINE_TYPE_NOT_OPEN = 4,
  MSG_ROUTINE_TYPE_REWARD_MAX_NUM = 5,
  MSG_MECHANICUS_COIN_LIMIT = 6,
  SvrMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SvrMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SvrMsgId_IsValid(int value);
const SvrMsgId SvrMsgId_MIN = MSG_UNKNOWN;
const SvrMsgId SvrMsgId_MAX = MSG_MECHANICUS_COIN_LIMIT;
const int SvrMsgId_ARRAYSIZE = SvrMsgId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SvrMsgId_descriptor();
inline const ::std::string& SvrMsgId_Name(SvrMsgId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SvrMsgId_descriptor(), value);
}
inline bool SvrMsgId_Parse(
    const ::std::string& name, SvrMsgId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SvrMsgId>(
    SvrMsgId_descriptor(), name, value);
}
enum ServerLogType {
  SERVER_LOG_NONE = 0,
  SERVER_LOG_ABILITY = 1,
  SERVER_LOG_LEVEL = 2,
  SERVER_LOG_ENTITY = 3,
  SERVER_LOG_LUA = 4,
  ServerLogType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerLogType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerLogType_IsValid(int value);
const ServerLogType ServerLogType_MIN = SERVER_LOG_NONE;
const ServerLogType ServerLogType_MAX = SERVER_LOG_LUA;
const int ServerLogType_ARRAYSIZE = ServerLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerLogType_descriptor();
inline const ::std::string& ServerLogType_Name(ServerLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerLogType_descriptor(), value);
}
inline bool ServerLogType_Parse(
    const ::std::string& name, ServerLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerLogType>(
    ServerLogType_descriptor(), name, value);
}
enum ServerLogLevel {
  LOG_LEVEL_NONE = 0,
  LOG_LEVEL_DEBUG = 1,
  LOG_LEVEL_INFO = 2,
  LOG_LEVEL_WARNING = 3,
  LOG_LEVEL_ERROR = 4,
  ServerLogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerLogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerLogLevel_IsValid(int value);
const ServerLogLevel ServerLogLevel_MIN = LOG_LEVEL_NONE;
const ServerLogLevel ServerLogLevel_MAX = LOG_LEVEL_ERROR;
const int ServerLogLevel_ARRAYSIZE = ServerLogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerLogLevel_descriptor();
inline const ::std::string& ServerLogLevel_Name(ServerLogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerLogLevel_descriptor(), value);
}
inline bool ServerLogLevel_Parse(
    const ::std::string& name, ServerLogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerLogLevel>(
    ServerLogLevel_descriptor(), name, value);
}
enum ClientReconnectReason {
  CLIENT_RECONNNECT_NONE = 0,
  CLIENT_RECONNNECT_QUIT_MP = 1,
  ClientReconnectReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientReconnectReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientReconnectReason_IsValid(int value);
const ClientReconnectReason ClientReconnectReason_MIN = CLIENT_RECONNNECT_NONE;
const ClientReconnectReason ClientReconnectReason_MAX = CLIENT_RECONNNECT_QUIT_MP;
const int ClientReconnectReason_ARRAYSIZE = ClientReconnectReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientReconnectReason_descriptor();
inline const ::std::string& ClientReconnectReason_Name(ClientReconnectReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientReconnectReason_descriptor(), value);
}
inline bool ClientReconnectReason_Parse(
    const ::std::string& name, ClientReconnectReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientReconnectReason>(
    ClientReconnectReason_descriptor(), name, value);
}
// ===================================================================

class KeepAliveNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.KeepAliveNotify) */ {
 public:
  KeepAliveNotify();
  virtual ~KeepAliveNotify();

  KeepAliveNotify(const KeepAliveNotify& from);

  inline KeepAliveNotify& operator=(const KeepAliveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeepAliveNotify(KeepAliveNotify&& from) noexcept
    : KeepAliveNotify() {
    *this = ::std::move(from);
  }

  inline KeepAliveNotify& operator=(KeepAliveNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAliveNotify& default_instance();

  static inline const KeepAliveNotify* internal_default_instance() {
    return reinterpret_cast<const KeepAliveNotify*>(
               &_KeepAliveNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(KeepAliveNotify* other);
  friend void swap(KeepAliveNotify& a, KeepAliveNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeepAliveNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  KeepAliveNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeepAliveNotify& from);
  void MergeFrom(const KeepAliveNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeepAliveNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef KeepAliveNotify_CmdId CmdId;
  static const CmdId NONE =
    KeepAliveNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    KeepAliveNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    KeepAliveNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    KeepAliveNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return KeepAliveNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    KeepAliveNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    KeepAliveNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    KeepAliveNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return KeepAliveNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return KeepAliveNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return KeepAliveNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.KeepAliveNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GmTalkReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GmTalkReq) */ {
 public:
  GmTalkReq();
  virtual ~GmTalkReq();

  GmTalkReq(const GmTalkReq& from);

  inline GmTalkReq& operator=(const GmTalkReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GmTalkReq(GmTalkReq&& from) noexcept
    : GmTalkReq() {
    *this = ::std::move(from);
  }

  inline GmTalkReq& operator=(GmTalkReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GmTalkReq& default_instance();

  static inline const GmTalkReq* internal_default_instance() {
    return reinterpret_cast<const GmTalkReq*>(
               &_GmTalkReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GmTalkReq* other);
  friend void swap(GmTalkReq& a, GmTalkReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GmTalkReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GmTalkReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GmTalkReq& from);
  void MergeFrom(const GmTalkReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GmTalkReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GmTalkReq_CmdId CmdId;
  static const CmdId NONE =
    GmTalkReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GmTalkReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GmTalkReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GmTalkReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GmTalkReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GmTalkReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GmTalkReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GmTalkReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GmTalkReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GmTalkReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GmTalkReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GmTalkReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string msg = 13;
  void clear_msg();
  static const int kMsgFieldNumber = 13;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:proto.GmTalkReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GmTalkRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GmTalkRsp) */ {
 public:
  GmTalkRsp();
  virtual ~GmTalkRsp();

  GmTalkRsp(const GmTalkRsp& from);

  inline GmTalkRsp& operator=(const GmTalkRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GmTalkRsp(GmTalkRsp&& from) noexcept
    : GmTalkRsp() {
    *this = ::std::move(from);
  }

  inline GmTalkRsp& operator=(GmTalkRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GmTalkRsp& default_instance();

  static inline const GmTalkRsp* internal_default_instance() {
    return reinterpret_cast<const GmTalkRsp*>(
               &_GmTalkRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GmTalkRsp* other);
  friend void swap(GmTalkRsp& a, GmTalkRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GmTalkRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GmTalkRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GmTalkRsp& from);
  void MergeFrom(const GmTalkRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GmTalkRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GmTalkRsp_CmdId CmdId;
  static const CmdId NONE =
    GmTalkRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GmTalkRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GmTalkRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GmTalkRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GmTalkRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GmTalkRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GmTalkRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GmTalkRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GmTalkRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GmTalkRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GmTalkRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string retmsg = 3;
  void clear_retmsg();
  static const int kRetmsgFieldNumber = 3;
  const ::std::string& retmsg() const;
  void set_retmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_retmsg(::std::string&& value);
  #endif
  void set_retmsg(const char* value);
  void set_retmsg(const char* value, size_t size);
  ::std::string* mutable_retmsg();
  ::std::string* release_retmsg();
  void set_allocated_retmsg(::std::string* retmsg);

  // string msg = 13;
  void clear_msg();
  static const int kMsgFieldNumber = 13;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int32 retcode = 15;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 15;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GmTalkRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr retmsg_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MsgParam) */ {
 public:
  MsgParam();
  virtual ~MsgParam();

  MsgParam(const MsgParam& from);

  inline MsgParam& operator=(const MsgParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgParam(MsgParam&& from) noexcept
    : MsgParam() {
    *this = ::std::move(from);
  }

  inline MsgParam& operator=(MsgParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgParam& default_instance();

  enum ParamCase {
    kIntParam = 9,
    kFltParam = 7,
    kStrParam = 4,
    PARAM_NOT_SET = 0,
  };

  static inline const MsgParam* internal_default_instance() {
    return reinterpret_cast<const MsgParam*>(
               &_MsgParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MsgParam* other);
  friend void swap(MsgParam& a, MsgParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgParam* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgParam& from);
  void MergeFrom(const MsgParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 int_param = 9;
  private:
  bool has_int_param() const;
  public:
  void clear_int_param();
  static const int kIntParamFieldNumber = 9;
  ::google::protobuf::uint32 int_param() const;
  void set_int_param(::google::protobuf::uint32 value);

  // float flt_param = 7;
  private:
  bool has_flt_param() const;
  public:
  void clear_flt_param();
  static const int kFltParamFieldNumber = 7;
  float flt_param() const;
  void set_flt_param(float value);

  // string str_param = 4;
  private:
  bool has_str_param() const;
  public:
  void clear_str_param();
  static const int kStrParamFieldNumber = 4;
  const ::std::string& str_param() const;
  void set_str_param(const ::std::string& value);
  #if LANG_CXX11
  void set_str_param(::std::string&& value);
  #endif
  void set_str_param(const char* value);
  void set_str_param(const char* value, size_t size);
  ::std::string* mutable_str_param();
  ::std::string* release_str_param();
  void set_allocated_str_param(::std::string* str_param);

  ParamCase param_case() const;
  // @@protoc_insertion_point(class_scope:proto.MsgParam)
 private:
  void set_has_int_param();
  void set_has_flt_param();
  void set_has_str_param();

  inline bool has_param() const;
  void clear_param();
  inline void clear_has_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ParamUnion {
    ParamUnion() {}
    ::google::protobuf::uint32 int_param_;
    float flt_param_;
    ::google::protobuf::internal::ArenaStringPtr str_param_;
  } param_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowMessageNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowMessageNotify) */ {
 public:
  ShowMessageNotify();
  virtual ~ShowMessageNotify();

  ShowMessageNotify(const ShowMessageNotify& from);

  inline ShowMessageNotify& operator=(const ShowMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowMessageNotify(ShowMessageNotify&& from) noexcept
    : ShowMessageNotify() {
    *this = ::std::move(from);
  }

  inline ShowMessageNotify& operator=(ShowMessageNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowMessageNotify& default_instance();

  static inline const ShowMessageNotify* internal_default_instance() {
    return reinterpret_cast<const ShowMessageNotify*>(
               &_ShowMessageNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ShowMessageNotify* other);
  friend void swap(ShowMessageNotify& a, ShowMessageNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowMessageNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowMessageNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowMessageNotify& from);
  void MergeFrom(const ShowMessageNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowMessageNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ShowMessageNotify_CmdId CmdId;
  static const CmdId NONE =
    ShowMessageNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ShowMessageNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ShowMessageNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ShowMessageNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return ShowMessageNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ShowMessageNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ShowMessageNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ShowMessageNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ShowMessageNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ShowMessageNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ShowMessageNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.MsgParam params = 13;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 13;
  const ::proto::MsgParam& params(int index) const;
  ::proto::MsgParam* mutable_params(int index);
  ::proto::MsgParam* add_params();
  ::google::protobuf::RepeatedPtrField< ::proto::MsgParam >*
      mutable_params();
  const ::google::protobuf::RepeatedPtrField< ::proto::MsgParam >&
      params() const;

  // .proto.SvrMsgId msg_id = 14;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 14;
  ::proto::SvrMsgId msg_id() const;
  void set_msg_id(::proto::SvrMsgId value);

  // @@protoc_insertion_point(class_scope:proto.ShowMessageNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::MsgParam > params_;
  int msg_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PingReq) */ {
 public:
  PingReq();
  virtual ~PingReq();

  PingReq(const PingReq& from);

  inline PingReq& operator=(const PingReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingReq(PingReq&& from) noexcept
    : PingReq() {
    *this = ::std::move(from);
  }

  inline PingReq& operator=(PingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingReq& default_instance();

  static inline const PingReq* internal_default_instance() {
    return reinterpret_cast<const PingReq*>(
               &_PingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PingReq* other);
  friend void swap(PingReq& a, PingReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingReq& from);
  void MergeFrom(const PingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PingReq_CmdId CmdId;
  static const CmdId NONE =
    PingReq_CmdId_NONE;
  static const CmdId CMD_ID =
    PingReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PingReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PingReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    PingReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return PingReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PingReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PingReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PingReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PingReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PingReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PingReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes sc_data = 10;
  void clear_sc_data();
  static const int kScDataFieldNumber = 10;
  const ::std::string& sc_data() const;
  void set_sc_data(const ::std::string& value);
  #if LANG_CXX11
  void set_sc_data(::std::string&& value);
  #endif
  void set_sc_data(const char* value);
  void set_sc_data(const void* value, size_t size);
  ::std::string* mutable_sc_data();
  ::std::string* release_sc_data();
  void set_allocated_sc_data(::std::string* sc_data);

  // double total_tick_time = 6;
  void clear_total_tick_time();
  static const int kTotalTickTimeFieldNumber = 6;
  double total_tick_time() const;
  void set_total_tick_time(double value);

  // float ue_time = 14;
  void clear_ue_time();
  static const int kUeTimeFieldNumber = 14;
  float ue_time() const;
  void set_ue_time(float value);

  // uint32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // uint32 client_time = 12;
  void clear_client_time();
  static const int kClientTimeFieldNumber = 12;
  ::google::protobuf::uint32 client_time() const;
  void set_client_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PingReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sc_data_;
  double total_tick_time_;
  float ue_time_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 client_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PingRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PingRsp) */ {
 public:
  PingRsp();
  virtual ~PingRsp();

  PingRsp(const PingRsp& from);

  inline PingRsp& operator=(const PingRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRsp(PingRsp&& from) noexcept
    : PingRsp() {
    *this = ::std::move(from);
  }

  inline PingRsp& operator=(PingRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRsp& default_instance();

  static inline const PingRsp* internal_default_instance() {
    return reinterpret_cast<const PingRsp*>(
               &_PingRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PingRsp* other);
  friend void swap(PingRsp& a, PingRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PingRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingRsp& from);
  void MergeFrom(const PingRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PingRsp_CmdId CmdId;
  static const CmdId NONE =
    PingRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    PingRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    PingRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    PingRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return PingRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    PingRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    PingRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    PingRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return PingRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return PingRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return PingRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 client_time = 15;
  void clear_client_time();
  static const int kClientTimeFieldNumber = 15;
  ::google::protobuf::uint32 client_time() const;
  void set_client_time(::google::protobuf::uint32 value);

  // int32 retcode = 6;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 seq = 13;
  void clear_seq();
  static const int kSeqFieldNumber = 13;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PingRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 client_time_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 seq_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOnlinePlayerListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetOnlinePlayerListReq) */ {
 public:
  GetOnlinePlayerListReq();
  virtual ~GetOnlinePlayerListReq();

  GetOnlinePlayerListReq(const GetOnlinePlayerListReq& from);

  inline GetOnlinePlayerListReq& operator=(const GetOnlinePlayerListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOnlinePlayerListReq(GetOnlinePlayerListReq&& from) noexcept
    : GetOnlinePlayerListReq() {
    *this = ::std::move(from);
  }

  inline GetOnlinePlayerListReq& operator=(GetOnlinePlayerListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlinePlayerListReq& default_instance();

  static inline const GetOnlinePlayerListReq* internal_default_instance() {
    return reinterpret_cast<const GetOnlinePlayerListReq*>(
               &_GetOnlinePlayerListReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetOnlinePlayerListReq* other);
  friend void swap(GetOnlinePlayerListReq& a, GetOnlinePlayerListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOnlinePlayerListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOnlinePlayerListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOnlinePlayerListReq& from);
  void MergeFrom(const GetOnlinePlayerListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOnlinePlayerListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetOnlinePlayerListReq_CmdId CmdId;
  static const CmdId NONE =
    GetOnlinePlayerListReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetOnlinePlayerListReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetOnlinePlayerListReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetOnlinePlayerListReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetOnlinePlayerListReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetOnlinePlayerListReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetOnlinePlayerListReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetOnlinePlayerListReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetOnlinePlayerListReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetOnlinePlayerListReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetOnlinePlayerListReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetOnlinePlayerListReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetOnlinePlayerListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOnlinePlayerListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetOnlinePlayerListRsp) */ {
 public:
  GetOnlinePlayerListRsp();
  virtual ~GetOnlinePlayerListRsp();

  GetOnlinePlayerListRsp(const GetOnlinePlayerListRsp& from);

  inline GetOnlinePlayerListRsp& operator=(const GetOnlinePlayerListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOnlinePlayerListRsp(GetOnlinePlayerListRsp&& from) noexcept
    : GetOnlinePlayerListRsp() {
    *this = ::std::move(from);
  }

  inline GetOnlinePlayerListRsp& operator=(GetOnlinePlayerListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlinePlayerListRsp& default_instance();

  static inline const GetOnlinePlayerListRsp* internal_default_instance() {
    return reinterpret_cast<const GetOnlinePlayerListRsp*>(
               &_GetOnlinePlayerListRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetOnlinePlayerListRsp* other);
  friend void swap(GetOnlinePlayerListRsp& a, GetOnlinePlayerListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOnlinePlayerListRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOnlinePlayerListRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOnlinePlayerListRsp& from);
  void MergeFrom(const GetOnlinePlayerListRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOnlinePlayerListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetOnlinePlayerListRsp_CmdId CmdId;
  static const CmdId NONE =
    GetOnlinePlayerListRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetOnlinePlayerListRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetOnlinePlayerListRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetOnlinePlayerListRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetOnlinePlayerListRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetOnlinePlayerListRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetOnlinePlayerListRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetOnlinePlayerListRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetOnlinePlayerListRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetOnlinePlayerListRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetOnlinePlayerListRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.OnlinePlayerInfo player_info_list = 5;
  int player_info_list_size() const;
  void clear_player_info_list();
  static const int kPlayerInfoListFieldNumber = 5;
  const ::proto::OnlinePlayerInfo& player_info_list(int index) const;
  ::proto::OnlinePlayerInfo* mutable_player_info_list(int index);
  ::proto::OnlinePlayerInfo* add_player_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >*
      mutable_player_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >&
      player_info_list() const;

  // int32 retcode = 7;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 7;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 param = 11;
  void clear_param();
  static const int kParamFieldNumber = 11;
  ::google::protobuf::uint32 param() const;
  void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetOnlinePlayerListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo > player_info_list_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 param_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerTimeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ServerTimeNotify) */ {
 public:
  ServerTimeNotify();
  virtual ~ServerTimeNotify();

  ServerTimeNotify(const ServerTimeNotify& from);

  inline ServerTimeNotify& operator=(const ServerTimeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerTimeNotify(ServerTimeNotify&& from) noexcept
    : ServerTimeNotify() {
    *this = ::std::move(from);
  }

  inline ServerTimeNotify& operator=(ServerTimeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerTimeNotify& default_instance();

  static inline const ServerTimeNotify* internal_default_instance() {
    return reinterpret_cast<const ServerTimeNotify*>(
               &_ServerTimeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ServerTimeNotify* other);
  friend void swap(ServerTimeNotify& a, ServerTimeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerTimeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerTimeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerTimeNotify& from);
  void MergeFrom(const ServerTimeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerTimeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServerTimeNotify_CmdId CmdId;
  static const CmdId NONE =
    ServerTimeNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ServerTimeNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ServerTimeNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ServerTimeNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return ServerTimeNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ServerTimeNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ServerTimeNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ServerTimeNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ServerTimeNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ServerTimeNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ServerTimeNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint64 server_time = 5;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 5;
  ::google::protobuf::uint64 server_time() const;
  void set_server_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.ServerTimeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 server_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerLogNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ServerLogNotify) */ {
 public:
  ServerLogNotify();
  virtual ~ServerLogNotify();

  ServerLogNotify(const ServerLogNotify& from);

  inline ServerLogNotify& operator=(const ServerLogNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerLogNotify(ServerLogNotify&& from) noexcept
    : ServerLogNotify() {
    *this = ::std::move(from);
  }

  inline ServerLogNotify& operator=(ServerLogNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerLogNotify& default_instance();

  static inline const ServerLogNotify* internal_default_instance() {
    return reinterpret_cast<const ServerLogNotify*>(
               &_ServerLogNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ServerLogNotify* other);
  friend void swap(ServerLogNotify& a, ServerLogNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerLogNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerLogNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerLogNotify& from);
  void MergeFrom(const ServerLogNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerLogNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ServerLogNotify_CmdId CmdId;
  static const CmdId NONE =
    ServerLogNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ServerLogNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ServerLogNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ServerLogNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return ServerLogNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ServerLogNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ServerLogNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ServerLogNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ServerLogNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ServerLogNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ServerLogNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string server_log = 7;
  void clear_server_log();
  static const int kServerLogFieldNumber = 7;
  const ::std::string& server_log() const;
  void set_server_log(const ::std::string& value);
  #if LANG_CXX11
  void set_server_log(::std::string&& value);
  #endif
  void set_server_log(const char* value);
  void set_server_log(const char* value, size_t size);
  ::std::string* mutable_server_log();
  ::std::string* release_server_log();
  void set_allocated_server_log(::std::string* server_log);

  // .proto.ServerLogType log_type = 9;
  void clear_log_type();
  static const int kLogTypeFieldNumber = 9;
  ::proto::ServerLogType log_type() const;
  void set_log_type(::proto::ServerLogType value);

  // .proto.ServerLogLevel log_level = 15;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 15;
  ::proto::ServerLogLevel log_level() const;
  void set_log_level(::proto::ServerLogLevel value);

  // @@protoc_insertion_point(class_scope:proto.ServerLogNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_log_;
  int log_type_;
  int log_level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientReconnectNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ClientReconnectNotify) */ {
 public:
  ClientReconnectNotify();
  virtual ~ClientReconnectNotify();

  ClientReconnectNotify(const ClientReconnectNotify& from);

  inline ClientReconnectNotify& operator=(const ClientReconnectNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientReconnectNotify(ClientReconnectNotify&& from) noexcept
    : ClientReconnectNotify() {
    *this = ::std::move(from);
  }

  inline ClientReconnectNotify& operator=(ClientReconnectNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReconnectNotify& default_instance();

  static inline const ClientReconnectNotify* internal_default_instance() {
    return reinterpret_cast<const ClientReconnectNotify*>(
               &_ClientReconnectNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ClientReconnectNotify* other);
  friend void swap(ClientReconnectNotify& a, ClientReconnectNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientReconnectNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientReconnectNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientReconnectNotify& from);
  void MergeFrom(const ClientReconnectNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientReconnectNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClientReconnectNotify_CmdId CmdId;
  static const CmdId NONE =
    ClientReconnectNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ClientReconnectNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ClientReconnectNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ClientReconnectNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return ClientReconnectNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ClientReconnectNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ClientReconnectNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ClientReconnectNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ClientReconnectNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ClientReconnectNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ClientReconnectNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.ClientReconnectReason reason = 6;
  void clear_reason();
  static const int kReasonFieldNumber = 6;
  ::proto::ClientReconnectReason reason() const;
  void set_reason(::proto::ClientReconnectReason value);

  // @@protoc_insertion_point(class_scope:proto.ClientReconnectNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotPushPlayerDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RobotPushPlayerDataNotify) */ {
 public:
  RobotPushPlayerDataNotify();
  virtual ~RobotPushPlayerDataNotify();

  RobotPushPlayerDataNotify(const RobotPushPlayerDataNotify& from);

  inline RobotPushPlayerDataNotify& operator=(const RobotPushPlayerDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotPushPlayerDataNotify(RobotPushPlayerDataNotify&& from) noexcept
    : RobotPushPlayerDataNotify() {
    *this = ::std::move(from);
  }

  inline RobotPushPlayerDataNotify& operator=(RobotPushPlayerDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotPushPlayerDataNotify& default_instance();

  static inline const RobotPushPlayerDataNotify* internal_default_instance() {
    return reinterpret_cast<const RobotPushPlayerDataNotify*>(
               &_RobotPushPlayerDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RobotPushPlayerDataNotify* other);
  friend void swap(RobotPushPlayerDataNotify& a, RobotPushPlayerDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotPushPlayerDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  RobotPushPlayerDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RobotPushPlayerDataNotify& from);
  void MergeFrom(const RobotPushPlayerDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RobotPushPlayerDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RobotPushPlayerDataNotify_CmdId CmdId;
  static const CmdId NONE =
    RobotPushPlayerDataNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    RobotPushPlayerDataNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    RobotPushPlayerDataNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    RobotPushPlayerDataNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return RobotPushPlayerDataNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    RobotPushPlayerDataNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    RobotPushPlayerDataNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    RobotPushPlayerDataNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return RobotPushPlayerDataNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return RobotPushPlayerDataNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return RobotPushPlayerDataNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes bin = 6;
  void clear_bin();
  static const int kBinFieldNumber = 6;
  const ::std::string& bin() const;
  void set_bin(const ::std::string& value);
  #if LANG_CXX11
  void set_bin(::std::string&& value);
  #endif
  void set_bin(const char* value);
  void set_bin(const void* value, size_t size);
  ::std::string* mutable_bin();
  ::std::string* release_bin();
  void set_allocated_bin(::std::string* bin);

  // @@protoc_insertion_point(class_scope:proto.RobotPushPlayerDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bin_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientReportNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ClientReportNotify) */ {
 public:
  ClientReportNotify();
  virtual ~ClientReportNotify();

  ClientReportNotify(const ClientReportNotify& from);

  inline ClientReportNotify& operator=(const ClientReportNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientReportNotify(ClientReportNotify&& from) noexcept
    : ClientReportNotify() {
    *this = ::std::move(from);
  }

  inline ClientReportNotify& operator=(ClientReportNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReportNotify& default_instance();

  static inline const ClientReportNotify* internal_default_instance() {
    return reinterpret_cast<const ClientReportNotify*>(
               &_ClientReportNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ClientReportNotify* other);
  friend void swap(ClientReportNotify& a, ClientReportNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientReportNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientReportNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientReportNotify& from);
  void MergeFrom(const ClientReportNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientReportNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClientReportNotify_CmdId CmdId;
  static const CmdId NONE =
    ClientReportNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ClientReportNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ClientReportNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ClientReportNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    ClientReportNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return ClientReportNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ClientReportNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ClientReportNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ClientReportNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ClientReportNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ClientReportNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ClientReportNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string report_type = 1;
  void clear_report_type();
  static const int kReportTypeFieldNumber = 1;
  const ::std::string& report_type() const;
  void set_report_type(const ::std::string& value);
  #if LANG_CXX11
  void set_report_type(::std::string&& value);
  #endif
  void set_report_type(const char* value);
  void set_report_type(const char* value, size_t size);
  ::std::string* mutable_report_type();
  ::std::string* release_report_type();
  void set_allocated_report_type(::std::string* report_type);

  // string report_value = 4;
  void clear_report_value();
  static const int kReportValueFieldNumber = 4;
  const ::std::string& report_value() const;
  void set_report_value(const ::std::string& value);
  #if LANG_CXX11
  void set_report_value(::std::string&& value);
  #endif
  void set_report_value(const char* value);
  void set_report_value(const char* value, size_t size);
  ::std::string* mutable_report_value();
  ::std::string* release_report_value();
  void set_allocated_report_value(::std::string* report_value);

  // @@protoc_insertion_point(class_scope:proto.ClientReportNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr report_type_;
  ::google::protobuf::internal::ArenaStringPtr report_value_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnionCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UnionCmd) */ {
 public:
  UnionCmd();
  virtual ~UnionCmd();

  UnionCmd(const UnionCmd& from);

  inline UnionCmd& operator=(const UnionCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnionCmd(UnionCmd&& from) noexcept
    : UnionCmd() {
    *this = ::std::move(from);
  }

  inline UnionCmd& operator=(UnionCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnionCmd& default_instance();

  static inline const UnionCmd* internal_default_instance() {
    return reinterpret_cast<const UnionCmd*>(
               &_UnionCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(UnionCmd* other);
  friend void swap(UnionCmd& a, UnionCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnionCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  UnionCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnionCmd& from);
  void MergeFrom(const UnionCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnionCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes body = 14;
  void clear_body();
  static const int kBodyFieldNumber = 14;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // uint32 message_id = 8;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 8;
  ::google::protobuf::uint32 message_id() const;
  void set_message_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.UnionCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::uint32 message_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnionCmdNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UnionCmdNotify) */ {
 public:
  UnionCmdNotify();
  virtual ~UnionCmdNotify();

  UnionCmdNotify(const UnionCmdNotify& from);

  inline UnionCmdNotify& operator=(const UnionCmdNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnionCmdNotify(UnionCmdNotify&& from) noexcept
    : UnionCmdNotify() {
    *this = ::std::move(from);
  }

  inline UnionCmdNotify& operator=(UnionCmdNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnionCmdNotify& default_instance();

  static inline const UnionCmdNotify* internal_default_instance() {
    return reinterpret_cast<const UnionCmdNotify*>(
               &_UnionCmdNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UnionCmdNotify* other);
  friend void swap(UnionCmdNotify& a, UnionCmdNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnionCmdNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UnionCmdNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnionCmdNotify& from);
  void MergeFrom(const UnionCmdNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnionCmdNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UnionCmdNotify_CmdId CmdId;
  static const CmdId NONE =
    UnionCmdNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    UnionCmdNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    UnionCmdNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    UnionCmdNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    UnionCmdNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return UnionCmdNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    UnionCmdNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    UnionCmdNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    UnionCmdNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return UnionCmdNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return UnionCmdNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return UnionCmdNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.UnionCmd cmd_list = 1;
  int cmd_list_size() const;
  void clear_cmd_list();
  static const int kCmdListFieldNumber = 1;
  const ::proto::UnionCmd& cmd_list(int index) const;
  ::proto::UnionCmd* mutable_cmd_list(int index);
  ::proto::UnionCmd* add_cmd_list();
  ::google::protobuf::RepeatedPtrField< ::proto::UnionCmd >*
      mutable_cmd_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::UnionCmd >&
      cmd_list() const;

  // @@protoc_insertion_point(class_scope:proto.UnionCmdNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::UnionCmd > cmd_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOnlinePlayerInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetOnlinePlayerInfoReq) */ {
 public:
  GetOnlinePlayerInfoReq();
  virtual ~GetOnlinePlayerInfoReq();

  GetOnlinePlayerInfoReq(const GetOnlinePlayerInfoReq& from);

  inline GetOnlinePlayerInfoReq& operator=(const GetOnlinePlayerInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOnlinePlayerInfoReq(GetOnlinePlayerInfoReq&& from) noexcept
    : GetOnlinePlayerInfoReq() {
    *this = ::std::move(from);
  }

  inline GetOnlinePlayerInfoReq& operator=(GetOnlinePlayerInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlinePlayerInfoReq& default_instance();

  enum PlayerIdCase {
    kTargetUid = 9,
    kOnlineId = 7,
    kPsnId = 2,
    PLAYER_ID_NOT_SET = 0,
  };

  static inline const GetOnlinePlayerInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetOnlinePlayerInfoReq*>(
               &_GetOnlinePlayerInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GetOnlinePlayerInfoReq* other);
  friend void swap(GetOnlinePlayerInfoReq& a, GetOnlinePlayerInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOnlinePlayerInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOnlinePlayerInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOnlinePlayerInfoReq& from);
  void MergeFrom(const GetOnlinePlayerInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOnlinePlayerInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetOnlinePlayerInfoReq_CmdId CmdId;
  static const CmdId NONE =
    GetOnlinePlayerInfoReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetOnlinePlayerInfoReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetOnlinePlayerInfoReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetOnlinePlayerInfoReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetOnlinePlayerInfoReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetOnlinePlayerInfoReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetOnlinePlayerInfoReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetOnlinePlayerInfoReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetOnlinePlayerInfoReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetOnlinePlayerInfoReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetOnlinePlayerInfoReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetOnlinePlayerInfoReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool is_online_id = 15;
  void clear_is_online_id();
  static const int kIsOnlineIdFieldNumber = 15;
  bool is_online_id() const;
  void set_is_online_id(bool value);

  // uint32 target_uid = 9;
  private:
  bool has_target_uid() const;
  public:
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 9;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // string online_id = 7;
  private:
  bool has_online_id() const;
  public:
  void clear_online_id();
  static const int kOnlineIdFieldNumber = 7;
  const ::std::string& online_id() const;
  void set_online_id(const ::std::string& value);
  #if LANG_CXX11
  void set_online_id(::std::string&& value);
  #endif
  void set_online_id(const char* value);
  void set_online_id(const char* value, size_t size);
  ::std::string* mutable_online_id();
  ::std::string* release_online_id();
  void set_allocated_online_id(::std::string* online_id);

  // string psn_id = 2;
  private:
  bool has_psn_id() const;
  public:
  void clear_psn_id();
  static const int kPsnIdFieldNumber = 2;
  const ::std::string& psn_id() const;
  void set_psn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_psn_id(::std::string&& value);
  #endif
  void set_psn_id(const char* value);
  void set_psn_id(const char* value, size_t size);
  ::std::string* mutable_psn_id();
  ::std::string* release_psn_id();
  void set_allocated_psn_id(::std::string* psn_id);

  PlayerIdCase player_id_case() const;
  // @@protoc_insertion_point(class_scope:proto.GetOnlinePlayerInfoReq)
 private:
  void set_has_target_uid();
  void set_has_online_id();
  void set_has_psn_id();

  inline bool has_player_id() const;
  void clear_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_online_id_;
  union PlayerIdUnion {
    PlayerIdUnion() {}
    ::google::protobuf::uint32 target_uid_;
    ::google::protobuf::internal::ArenaStringPtr online_id_;
    ::google::protobuf::internal::ArenaStringPtr psn_id_;
  } player_id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetOnlinePlayerInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetOnlinePlayerInfoRsp) */ {
 public:
  GetOnlinePlayerInfoRsp();
  virtual ~GetOnlinePlayerInfoRsp();

  GetOnlinePlayerInfoRsp(const GetOnlinePlayerInfoRsp& from);

  inline GetOnlinePlayerInfoRsp& operator=(const GetOnlinePlayerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOnlinePlayerInfoRsp(GetOnlinePlayerInfoRsp&& from) noexcept
    : GetOnlinePlayerInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetOnlinePlayerInfoRsp& operator=(GetOnlinePlayerInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOnlinePlayerInfoRsp& default_instance();

  static inline const GetOnlinePlayerInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetOnlinePlayerInfoRsp*>(
               &_GetOnlinePlayerInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetOnlinePlayerInfoRsp* other);
  friend void swap(GetOnlinePlayerInfoRsp& a, GetOnlinePlayerInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOnlinePlayerInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOnlinePlayerInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOnlinePlayerInfoRsp& from);
  void MergeFrom(const GetOnlinePlayerInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOnlinePlayerInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetOnlinePlayerInfoRsp_CmdId CmdId;
  static const CmdId NONE =
    GetOnlinePlayerInfoRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetOnlinePlayerInfoRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetOnlinePlayerInfoRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetOnlinePlayerInfoRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetOnlinePlayerInfoRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetOnlinePlayerInfoRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetOnlinePlayerInfoRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetOnlinePlayerInfoRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetOnlinePlayerInfoRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetOnlinePlayerInfoRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetOnlinePlayerInfoRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.OnlinePlayerInfo target_player_info = 14;
  bool has_target_player_info() const;
  void clear_target_player_info();
  static const int kTargetPlayerInfoFieldNumber = 14;
  const ::proto::OnlinePlayerInfo& target_player_info() const;
  ::proto::OnlinePlayerInfo* mutable_target_player_info();
  ::proto::OnlinePlayerInfo* release_target_player_info();
  void set_allocated_target_player_info(::proto::OnlinePlayerInfo* target_player_info);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 param = 4;
  void clear_param();
  static const int kParamFieldNumber = 4;
  ::google::protobuf::uint32 param() const;
  void set_param(::google::protobuf::uint32 value);

  // uint32 target_uid = 7;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 7;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetOnlinePlayerInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::OnlinePlayerInfo* target_player_info_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 param_;
  ::google::protobuf::uint32 target_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SegmentInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SegmentInfo) */ {
 public:
  SegmentInfo();
  virtual ~SegmentInfo();

  SegmentInfo(const SegmentInfo& from);

  inline SegmentInfo& operator=(const SegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SegmentInfo(SegmentInfo&& from) noexcept
    : SegmentInfo() {
    *this = ::std::move(from);
  }

  inline SegmentInfo& operator=(SegmentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentInfo& default_instance();

  static inline const SegmentInfo* internal_default_instance() {
    return reinterpret_cast<const SegmentInfo*>(
               &_SegmentInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(SegmentInfo* other);
  friend void swap(SegmentInfo& a, SegmentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SegmentInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SegmentInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SegmentInfo& from);
  void MergeFrom(const SegmentInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SegmentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 size = 8;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint32 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // uint32 module = 7;
  void clear_module();
  static const int kModuleFieldNumber = 7;
  ::google::protobuf::uint32 module() const;
  void set_module(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SegmentInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 module_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SegmentCRCInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SegmentCRCInfo) */ {
 public:
  SegmentCRCInfo();
  virtual ~SegmentCRCInfo();

  SegmentCRCInfo(const SegmentCRCInfo& from);

  inline SegmentCRCInfo& operator=(const SegmentCRCInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SegmentCRCInfo(SegmentCRCInfo&& from) noexcept
    : SegmentCRCInfo() {
    *this = ::std::move(from);
  }

  inline SegmentCRCInfo& operator=(SegmentCRCInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentCRCInfo& default_instance();

  static inline const SegmentCRCInfo* internal_default_instance() {
    return reinterpret_cast<const SegmentCRCInfo*>(
               &_SegmentCRCInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SegmentCRCInfo* other);
  friend void swap(SegmentCRCInfo& a, SegmentCRCInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SegmentCRCInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SegmentCRCInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SegmentCRCInfo& from);
  void MergeFrom(const SegmentCRCInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SegmentCRCInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string crc = 3;
  void clear_crc();
  static const int kCrcFieldNumber = 3;
  const ::std::string& crc() const;
  void set_crc(const ::std::string& value);
  #if LANG_CXX11
  void set_crc(::std::string&& value);
  #endif
  void set_crc(const char* value);
  void set_crc(const char* value, size_t size);
  ::std::string* mutable_crc();
  ::std::string* release_crc();
  void set_allocated_crc(::std::string* crc);

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 size = 10;
  void clear_size();
  static const int kSizeFieldNumber = 10;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint32 offset = 11;
  void clear_offset();
  static const int kOffsetFieldNumber = 11;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // uint32 module = 13;
  void clear_module();
  static const int kModuleFieldNumber = 13;
  ::google::protobuf::uint32 module() const;
  void set_module(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SegmentCRCInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr crc_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 module_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckSegmentCRCNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CheckSegmentCRCNotify) */ {
 public:
  CheckSegmentCRCNotify();
  virtual ~CheckSegmentCRCNotify();

  CheckSegmentCRCNotify(const CheckSegmentCRCNotify& from);

  inline CheckSegmentCRCNotify& operator=(const CheckSegmentCRCNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckSegmentCRCNotify(CheckSegmentCRCNotify&& from) noexcept
    : CheckSegmentCRCNotify() {
    *this = ::std::move(from);
  }

  inline CheckSegmentCRCNotify& operator=(CheckSegmentCRCNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckSegmentCRCNotify& default_instance();

  static inline const CheckSegmentCRCNotify* internal_default_instance() {
    return reinterpret_cast<const CheckSegmentCRCNotify*>(
               &_CheckSegmentCRCNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CheckSegmentCRCNotify* other);
  friend void swap(CheckSegmentCRCNotify& a, CheckSegmentCRCNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckSegmentCRCNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckSegmentCRCNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckSegmentCRCNotify& from);
  void MergeFrom(const CheckSegmentCRCNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckSegmentCRCNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CheckSegmentCRCNotify_CmdId CmdId;
  static const CmdId NONE =
    CheckSegmentCRCNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    CheckSegmentCRCNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    CheckSegmentCRCNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    CheckSegmentCRCNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return CheckSegmentCRCNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    CheckSegmentCRCNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    CheckSegmentCRCNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    CheckSegmentCRCNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return CheckSegmentCRCNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return CheckSegmentCRCNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return CheckSegmentCRCNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.SegmentInfo info_list = 6;
  int info_list_size() const;
  void clear_info_list();
  static const int kInfoListFieldNumber = 6;
  const ::proto::SegmentInfo& info_list(int index) const;
  ::proto::SegmentInfo* mutable_info_list(int index);
  ::proto::SegmentInfo* add_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::SegmentInfo >*
      mutable_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::SegmentInfo >&
      info_list() const;

  // @@protoc_insertion_point(class_scope:proto.CheckSegmentCRCNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::SegmentInfo > info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckSegmentCRCReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CheckSegmentCRCReq) */ {
 public:
  CheckSegmentCRCReq();
  virtual ~CheckSegmentCRCReq();

  CheckSegmentCRCReq(const CheckSegmentCRCReq& from);

  inline CheckSegmentCRCReq& operator=(const CheckSegmentCRCReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckSegmentCRCReq(CheckSegmentCRCReq&& from) noexcept
    : CheckSegmentCRCReq() {
    *this = ::std::move(from);
  }

  inline CheckSegmentCRCReq& operator=(CheckSegmentCRCReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckSegmentCRCReq& default_instance();

  static inline const CheckSegmentCRCReq* internal_default_instance() {
    return reinterpret_cast<const CheckSegmentCRCReq*>(
               &_CheckSegmentCRCReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CheckSegmentCRCReq* other);
  friend void swap(CheckSegmentCRCReq& a, CheckSegmentCRCReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckSegmentCRCReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckSegmentCRCReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckSegmentCRCReq& from);
  void MergeFrom(const CheckSegmentCRCReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckSegmentCRCReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CheckSegmentCRCReq_CmdId CmdId;
  static const CmdId NONE =
    CheckSegmentCRCReq_CmdId_NONE;
  static const CmdId CMD_ID =
    CheckSegmentCRCReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    CheckSegmentCRCReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    CheckSegmentCRCReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    CheckSegmentCRCReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return CheckSegmentCRCReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    CheckSegmentCRCReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    CheckSegmentCRCReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    CheckSegmentCRCReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return CheckSegmentCRCReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return CheckSegmentCRCReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return CheckSegmentCRCReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.SegmentCRCInfo info_list = 1;
  int info_list_size() const;
  void clear_info_list();
  static const int kInfoListFieldNumber = 1;
  const ::proto::SegmentCRCInfo& info_list(int index) const;
  ::proto::SegmentCRCInfo* mutable_info_list(int index);
  ::proto::SegmentCRCInfo* add_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::SegmentCRCInfo >*
      mutable_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::SegmentCRCInfo >&
      info_list() const;

  // @@protoc_insertion_point(class_scope:proto.CheckSegmentCRCReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::SegmentCRCInfo > info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerRTTInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerRTTInfo) */ {
 public:
  PlayerRTTInfo();
  virtual ~PlayerRTTInfo();

  PlayerRTTInfo(const PlayerRTTInfo& from);

  inline PlayerRTTInfo& operator=(const PlayerRTTInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerRTTInfo(PlayerRTTInfo&& from) noexcept
    : PlayerRTTInfo() {
    *this = ::std::move(from);
  }

  inline PlayerRTTInfo& operator=(PlayerRTTInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRTTInfo& default_instance();

  static inline const PlayerRTTInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerRTTInfo*>(
               &_PlayerRTTInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(PlayerRTTInfo* other);
  friend void swap(PlayerRTTInfo& a, PlayerRTTInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerRTTInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerRTTInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerRTTInfo& from);
  void MergeFrom(const PlayerRTTInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerRTTInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 rtt = 2;
  void clear_rtt();
  static const int kRttFieldNumber = 2;
  ::google::protobuf::uint32 rtt() const;
  void set_rtt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerRTTInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 rtt_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WorldPlayerRTTNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.WorldPlayerRTTNotify) */ {
 public:
  WorldPlayerRTTNotify();
  virtual ~WorldPlayerRTTNotify();

  WorldPlayerRTTNotify(const WorldPlayerRTTNotify& from);

  inline WorldPlayerRTTNotify& operator=(const WorldPlayerRTTNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorldPlayerRTTNotify(WorldPlayerRTTNotify&& from) noexcept
    : WorldPlayerRTTNotify() {
    *this = ::std::move(from);
  }

  inline WorldPlayerRTTNotify& operator=(WorldPlayerRTTNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldPlayerRTTNotify& default_instance();

  static inline const WorldPlayerRTTNotify* internal_default_instance() {
    return reinterpret_cast<const WorldPlayerRTTNotify*>(
               &_WorldPlayerRTTNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(WorldPlayerRTTNotify* other);
  friend void swap(WorldPlayerRTTNotify& a, WorldPlayerRTTNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorldPlayerRTTNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  WorldPlayerRTTNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorldPlayerRTTNotify& from);
  void MergeFrom(const WorldPlayerRTTNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorldPlayerRTTNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WorldPlayerRTTNotify_CmdId CmdId;
  static const CmdId NONE =
    WorldPlayerRTTNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    WorldPlayerRTTNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    WorldPlayerRTTNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    WorldPlayerRTTNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return WorldPlayerRTTNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    WorldPlayerRTTNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    WorldPlayerRTTNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    WorldPlayerRTTNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return WorldPlayerRTTNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return WorldPlayerRTTNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return WorldPlayerRTTNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.PlayerRTTInfo player_rtt_list = 1;
  int player_rtt_list_size() const;
  void clear_player_rtt_list();
  static const int kPlayerRttListFieldNumber = 1;
  const ::proto::PlayerRTTInfo& player_rtt_list(int index) const;
  ::proto::PlayerRTTInfo* mutable_player_rtt_list(int index);
  ::proto::PlayerRTTInfo* add_player_rtt_list();
  ::google::protobuf::RepeatedPtrField< ::proto::PlayerRTTInfo >*
      mutable_player_rtt_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::PlayerRTTInfo >&
      player_rtt_list() const;

  // @@protoc_insertion_point(class_scope:proto.WorldPlayerRTTNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::PlayerRTTInfo > player_rtt_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EchoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EchoNotify) */ {
 public:
  EchoNotify();
  virtual ~EchoNotify();

  EchoNotify(const EchoNotify& from);

  inline EchoNotify& operator=(const EchoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoNotify(EchoNotify&& from) noexcept
    : EchoNotify() {
    *this = ::std::move(from);
  }

  inline EchoNotify& operator=(EchoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoNotify& default_instance();

  static inline const EchoNotify* internal_default_instance() {
    return reinterpret_cast<const EchoNotify*>(
               &_EchoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(EchoNotify* other);
  friend void swap(EchoNotify& a, EchoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  EchoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EchoNotify& from);
  void MergeFrom(const EchoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EchoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EchoNotify_CmdId CmdId;
  static const CmdId NONE =
    EchoNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    EchoNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    EchoNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    EchoNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return EchoNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    EchoNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    EchoNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    EchoNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return EchoNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return EchoNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return EchoNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string content = 9;
  void clear_content();
  static const int kContentFieldNumber = 9;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint32 seq_id = 4;
  void clear_seq_id();
  static const int kSeqIdFieldNumber = 4;
  ::google::protobuf::uint32 seq_id() const;
  void set_seq_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.EchoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 seq_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateRedPointNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UpdateRedPointNotify) */ {
 public:
  UpdateRedPointNotify();
  virtual ~UpdateRedPointNotify();

  UpdateRedPointNotify(const UpdateRedPointNotify& from);

  inline UpdateRedPointNotify& operator=(const UpdateRedPointNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateRedPointNotify(UpdateRedPointNotify&& from) noexcept
    : UpdateRedPointNotify() {
    *this = ::std::move(from);
  }

  inline UpdateRedPointNotify& operator=(UpdateRedPointNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRedPointNotify& default_instance();

  static inline const UpdateRedPointNotify* internal_default_instance() {
    return reinterpret_cast<const UpdateRedPointNotify*>(
               &_UpdateRedPointNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(UpdateRedPointNotify* other);
  friend void swap(UpdateRedPointNotify& a, UpdateRedPointNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateRedPointNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateRedPointNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateRedPointNotify& from);
  void MergeFrom(const UpdateRedPointNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateRedPointNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UpdateRedPointNotify_CmdId CmdId;
  static const CmdId NONE =
    UpdateRedPointNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    UpdateRedPointNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    UpdateRedPointNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    UpdateRedPointNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return UpdateRedPointNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    UpdateRedPointNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    UpdateRedPointNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    UpdateRedPointNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return UpdateRedPointNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return UpdateRedPointNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return UpdateRedPointNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.RedPointData red_point_list = 12;
  int red_point_list_size() const;
  void clear_red_point_list();
  static const int kRedPointListFieldNumber = 12;
  const ::proto::RedPointData& red_point_list(int index) const;
  ::proto::RedPointData* mutable_red_point_list(int index);
  ::proto::RedPointData* add_red_point_list();
  ::google::protobuf::RepeatedPtrField< ::proto::RedPointData >*
      mutable_red_point_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::RedPointData >&
      red_point_list() const;

  // @@protoc_insertion_point(class_scope:proto.UpdateRedPointNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::RedPointData > red_point_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientBulletCreateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ClientBulletCreateNotify) */ {
 public:
  ClientBulletCreateNotify();
  virtual ~ClientBulletCreateNotify();

  ClientBulletCreateNotify(const ClientBulletCreateNotify& from);

  inline ClientBulletCreateNotify& operator=(const ClientBulletCreateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientBulletCreateNotify(ClientBulletCreateNotify&& from) noexcept
    : ClientBulletCreateNotify() {
    *this = ::std::move(from);
  }

  inline ClientBulletCreateNotify& operator=(ClientBulletCreateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientBulletCreateNotify& default_instance();

  static inline const ClientBulletCreateNotify* internal_default_instance() {
    return reinterpret_cast<const ClientBulletCreateNotify*>(
               &_ClientBulletCreateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ClientBulletCreateNotify* other);
  friend void swap(ClientBulletCreateNotify& a, ClientBulletCreateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBulletCreateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientBulletCreateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientBulletCreateNotify& from);
  void MergeFrom(const ClientBulletCreateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientBulletCreateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ClientBulletCreateNotify_CmdId CmdId;
  static const CmdId NONE =
    ClientBulletCreateNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ClientBulletCreateNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ClientBulletCreateNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ClientBulletCreateNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    ClientBulletCreateNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return ClientBulletCreateNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ClientBulletCreateNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ClientBulletCreateNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ClientBulletCreateNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ClientBulletCreateNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ClientBulletCreateNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ClientBulletCreateNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 param = 6;
  void clear_param();
  static const int kParamFieldNumber = 6;
  ::google::protobuf::uint32 param() const;
  void set_param(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ClientBulletCreateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 param_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeServerGlobalValueNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChangeServerGlobalValueNotify) */ {
 public:
  ChangeServerGlobalValueNotify();
  virtual ~ChangeServerGlobalValueNotify();

  ChangeServerGlobalValueNotify(const ChangeServerGlobalValueNotify& from);

  inline ChangeServerGlobalValueNotify& operator=(const ChangeServerGlobalValueNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeServerGlobalValueNotify(ChangeServerGlobalValueNotify&& from) noexcept
    : ChangeServerGlobalValueNotify() {
    *this = ::std::move(from);
  }

  inline ChangeServerGlobalValueNotify& operator=(ChangeServerGlobalValueNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeServerGlobalValueNotify& default_instance();

  static inline const ChangeServerGlobalValueNotify* internal_default_instance() {
    return reinterpret_cast<const ChangeServerGlobalValueNotify*>(
               &_ChangeServerGlobalValueNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ChangeServerGlobalValueNotify* other);
  friend void swap(ChangeServerGlobalValueNotify& a, ChangeServerGlobalValueNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeServerGlobalValueNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeServerGlobalValueNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeServerGlobalValueNotify& from);
  void MergeFrom(const ChangeServerGlobalValueNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeServerGlobalValueNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChangeServerGlobalValueNotify_CmdId CmdId;
  static const CmdId NONE =
    ChangeServerGlobalValueNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    ChangeServerGlobalValueNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    ChangeServerGlobalValueNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    ChangeServerGlobalValueNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    ChangeServerGlobalValueNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return ChangeServerGlobalValueNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    ChangeServerGlobalValueNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    ChangeServerGlobalValueNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    ChangeServerGlobalValueNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return ChangeServerGlobalValueNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return ChangeServerGlobalValueNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return ChangeServerGlobalValueNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 entity_id = 4;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 4;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChangeServerGlobalValueNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 entity_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GmTalkNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GmTalkNotify) */ {
 public:
  GmTalkNotify();
  virtual ~GmTalkNotify();

  GmTalkNotify(const GmTalkNotify& from);

  inline GmTalkNotify& operator=(const GmTalkNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GmTalkNotify(GmTalkNotify&& from) noexcept
    : GmTalkNotify() {
    *this = ::std::move(from);
  }

  inline GmTalkNotify& operator=(GmTalkNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GmTalkNotify& default_instance();

  static inline const GmTalkNotify* internal_default_instance() {
    return reinterpret_cast<const GmTalkNotify*>(
               &_GmTalkNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(GmTalkNotify* other);
  friend void swap(GmTalkNotify& a, GmTalkNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GmTalkNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GmTalkNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GmTalkNotify& from);
  void MergeFrom(const GmTalkNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GmTalkNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GmTalkNotify_CmdId CmdId;
  static const CmdId NONE =
    GmTalkNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    GmTalkNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GmTalkNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GmTalkNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GmTalkNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GmTalkNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GmTalkNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GmTalkNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GmTalkNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GmTalkNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GmTalkNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string msg = 5;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:proto.GmTalkNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LastPacketPrintNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LastPacketPrintNotify) */ {
 public:
  LastPacketPrintNotify();
  virtual ~LastPacketPrintNotify();

  LastPacketPrintNotify(const LastPacketPrintNotify& from);

  inline LastPacketPrintNotify& operator=(const LastPacketPrintNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastPacketPrintNotify(LastPacketPrintNotify&& from) noexcept
    : LastPacketPrintNotify() {
    *this = ::std::move(from);
  }

  inline LastPacketPrintNotify& operator=(LastPacketPrintNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LastPacketPrintNotify& default_instance();

  static inline const LastPacketPrintNotify* internal_default_instance() {
    return reinterpret_cast<const LastPacketPrintNotify*>(
               &_LastPacketPrintNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(LastPacketPrintNotify* other);
  friend void swap(LastPacketPrintNotify& a, LastPacketPrintNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastPacketPrintNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LastPacketPrintNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LastPacketPrintNotify& from);
  void MergeFrom(const LastPacketPrintNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LastPacketPrintNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LastPacketPrintNotify_CmdId CmdId;
  static const CmdId NONE =
    LastPacketPrintNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    LastPacketPrintNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    LastPacketPrintNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    LastPacketPrintNotify_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    LastPacketPrintNotify_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return LastPacketPrintNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    LastPacketPrintNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    LastPacketPrintNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    LastPacketPrintNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return LastPacketPrintNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return LastPacketPrintNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return LastPacketPrintNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.LastPacketPrintNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmisc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeepAliveNotify

// -------------------------------------------------------------------

// GmTalkReq

// string msg = 13;
inline void GmTalkReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GmTalkReq::msg() const {
  // @@protoc_insertion_point(field_get:proto.GmTalkReq.msg)
  return msg_.GetNoArena();
}
inline void GmTalkReq::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GmTalkReq.msg)
}
#if LANG_CXX11
inline void GmTalkReq::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GmTalkReq.msg)
}
#endif
inline void GmTalkReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GmTalkReq.msg)
}
inline void GmTalkReq::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GmTalkReq.msg)
}
inline ::std::string* GmTalkReq::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.GmTalkReq.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GmTalkReq::release_msg() {
  // @@protoc_insertion_point(field_release:proto.GmTalkReq.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GmTalkReq::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.GmTalkReq.msg)
}

// -------------------------------------------------------------------

// GmTalkRsp

// int32 retcode = 15;
inline void GmTalkRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GmTalkRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GmTalkRsp.retcode)
  return retcode_;
}
inline void GmTalkRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GmTalkRsp.retcode)
}

// string retmsg = 3;
inline void GmTalkRsp::clear_retmsg() {
  retmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GmTalkRsp::retmsg() const {
  // @@protoc_insertion_point(field_get:proto.GmTalkRsp.retmsg)
  return retmsg_.GetNoArena();
}
inline void GmTalkRsp::set_retmsg(const ::std::string& value) {
  
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GmTalkRsp.retmsg)
}
#if LANG_CXX11
inline void GmTalkRsp::set_retmsg(::std::string&& value) {
  
  retmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GmTalkRsp.retmsg)
}
#endif
inline void GmTalkRsp::set_retmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GmTalkRsp.retmsg)
}
inline void GmTalkRsp::set_retmsg(const char* value, size_t size) {
  
  retmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GmTalkRsp.retmsg)
}
inline ::std::string* GmTalkRsp::mutable_retmsg() {
  
  // @@protoc_insertion_point(field_mutable:proto.GmTalkRsp.retmsg)
  return retmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GmTalkRsp::release_retmsg() {
  // @@protoc_insertion_point(field_release:proto.GmTalkRsp.retmsg)
  
  return retmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GmTalkRsp::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg != NULL) {
    
  } else {
    
  }
  retmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retmsg);
  // @@protoc_insertion_point(field_set_allocated:proto.GmTalkRsp.retmsg)
}

// string msg = 13;
inline void GmTalkRsp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GmTalkRsp::msg() const {
  // @@protoc_insertion_point(field_get:proto.GmTalkRsp.msg)
  return msg_.GetNoArena();
}
inline void GmTalkRsp::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GmTalkRsp.msg)
}
#if LANG_CXX11
inline void GmTalkRsp::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GmTalkRsp.msg)
}
#endif
inline void GmTalkRsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GmTalkRsp.msg)
}
inline void GmTalkRsp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GmTalkRsp.msg)
}
inline ::std::string* GmTalkRsp::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.GmTalkRsp.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GmTalkRsp::release_msg() {
  // @@protoc_insertion_point(field_release:proto.GmTalkRsp.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GmTalkRsp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.GmTalkRsp.msg)
}

// -------------------------------------------------------------------

// MsgParam

// uint32 int_param = 9;
inline bool MsgParam::has_int_param() const {
  return param_case() == kIntParam;
}
inline void MsgParam::set_has_int_param() {
  _oneof_case_[0] = kIntParam;
}
inline void MsgParam::clear_int_param() {
  if (has_int_param()) {
    param_.int_param_ = 0u;
    clear_has_param();
  }
}
inline ::google::protobuf::uint32 MsgParam::int_param() const {
  // @@protoc_insertion_point(field_get:proto.MsgParam.int_param)
  if (has_int_param()) {
    return param_.int_param_;
  }
  return 0u;
}
inline void MsgParam::set_int_param(::google::protobuf::uint32 value) {
  if (!has_int_param()) {
    clear_param();
    set_has_int_param();
  }
  param_.int_param_ = value;
  // @@protoc_insertion_point(field_set:proto.MsgParam.int_param)
}

// float flt_param = 7;
inline bool MsgParam::has_flt_param() const {
  return param_case() == kFltParam;
}
inline void MsgParam::set_has_flt_param() {
  _oneof_case_[0] = kFltParam;
}
inline void MsgParam::clear_flt_param() {
  if (has_flt_param()) {
    param_.flt_param_ = 0;
    clear_has_param();
  }
}
inline float MsgParam::flt_param() const {
  // @@protoc_insertion_point(field_get:proto.MsgParam.flt_param)
  if (has_flt_param()) {
    return param_.flt_param_;
  }
  return 0;
}
inline void MsgParam::set_flt_param(float value) {
  if (!has_flt_param()) {
    clear_param();
    set_has_flt_param();
  }
  param_.flt_param_ = value;
  // @@protoc_insertion_point(field_set:proto.MsgParam.flt_param)
}

// string str_param = 4;
inline bool MsgParam::has_str_param() const {
  return param_case() == kStrParam;
}
inline void MsgParam::set_has_str_param() {
  _oneof_case_[0] = kStrParam;
}
inline void MsgParam::clear_str_param() {
  if (has_str_param()) {
    param_.str_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_param();
  }
}
inline const ::std::string& MsgParam::str_param() const {
  // @@protoc_insertion_point(field_get:proto.MsgParam.str_param)
  if (has_str_param()) {
    return param_.str_param_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void MsgParam::set_str_param(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.MsgParam.str_param)
  if (!has_str_param()) {
    clear_param();
    set_has_str_param();
    param_.str_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  param_.str_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.MsgParam.str_param)
}
#if LANG_CXX11
inline void MsgParam::set_str_param(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.MsgParam.str_param)
  if (!has_str_param()) {
    clear_param();
    set_has_str_param();
    param_.str_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  param_.str_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.MsgParam.str_param)
}
#endif
inline void MsgParam::set_str_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_str_param()) {
    clear_param();
    set_has_str_param();
    param_.str_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  param_.str_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.MsgParam.str_param)
}
inline void MsgParam::set_str_param(const char* value, size_t size) {
  if (!has_str_param()) {
    clear_param();
    set_has_str_param();
    param_.str_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  param_.str_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.MsgParam.str_param)
}
inline ::std::string* MsgParam::mutable_str_param() {
  if (!has_str_param()) {
    clear_param();
    set_has_str_param();
    param_.str_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.MsgParam.str_param)
  return param_.str_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgParam::release_str_param() {
  // @@protoc_insertion_point(field_release:proto.MsgParam.str_param)
  if (has_str_param()) {
    clear_has_param();
    return param_.str_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void MsgParam::set_allocated_str_param(::std::string* str_param) {
  if (!has_str_param()) {
    param_.str_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_param();
  if (str_param != NULL) {
    set_has_str_param();
    param_.str_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        str_param);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MsgParam.str_param)
}

inline bool MsgParam::has_param() const {
  return param_case() != PARAM_NOT_SET;
}
inline void MsgParam::clear_has_param() {
  _oneof_case_[0] = PARAM_NOT_SET;
}
inline MsgParam::ParamCase MsgParam::param_case() const {
  return MsgParam::ParamCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ShowMessageNotify

// .proto.SvrMsgId msg_id = 14;
inline void ShowMessageNotify::clear_msg_id() {
  msg_id_ = 0;
}
inline ::proto::SvrMsgId ShowMessageNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowMessageNotify.msg_id)
  return static_cast< ::proto::SvrMsgId >(msg_id_);
}
inline void ShowMessageNotify::set_msg_id(::proto::SvrMsgId value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ShowMessageNotify.msg_id)
}

// repeated .proto.MsgParam params = 13;
inline int ShowMessageNotify::params_size() const {
  return params_.size();
}
inline void ShowMessageNotify::clear_params() {
  params_.Clear();
}
inline const ::proto::MsgParam& ShowMessageNotify::params(int index) const {
  // @@protoc_insertion_point(field_get:proto.ShowMessageNotify.params)
  return params_.Get(index);
}
inline ::proto::MsgParam* ShowMessageNotify::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ShowMessageNotify.params)
  return params_.Mutable(index);
}
inline ::proto::MsgParam* ShowMessageNotify::add_params() {
  // @@protoc_insertion_point(field_add:proto.ShowMessageNotify.params)
  return params_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::MsgParam >*
ShowMessageNotify::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:proto.ShowMessageNotify.params)
  return &params_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::MsgParam >&
ShowMessageNotify::params() const {
  // @@protoc_insertion_point(field_list:proto.ShowMessageNotify.params)
  return params_;
}

// -------------------------------------------------------------------

// PingReq

// uint32 client_time = 12;
inline void PingReq::clear_client_time() {
  client_time_ = 0u;
}
inline ::google::protobuf::uint32 PingReq::client_time() const {
  // @@protoc_insertion_point(field_get:proto.PingReq.client_time)
  return client_time_;
}
inline void PingReq::set_client_time(::google::protobuf::uint32 value) {
  
  client_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PingReq.client_time)
}

// float ue_time = 14;
inline void PingReq::clear_ue_time() {
  ue_time_ = 0;
}
inline float PingReq::ue_time() const {
  // @@protoc_insertion_point(field_get:proto.PingReq.ue_time)
  return ue_time_;
}
inline void PingReq::set_ue_time(float value) {
  
  ue_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PingReq.ue_time)
}

// double total_tick_time = 6;
inline void PingReq::clear_total_tick_time() {
  total_tick_time_ = 0;
}
inline double PingReq::total_tick_time() const {
  // @@protoc_insertion_point(field_get:proto.PingReq.total_tick_time)
  return total_tick_time_;
}
inline void PingReq::set_total_tick_time(double value) {
  
  total_tick_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PingReq.total_tick_time)
}

// bytes sc_data = 10;
inline void PingReq::clear_sc_data() {
  sc_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingReq::sc_data() const {
  // @@protoc_insertion_point(field_get:proto.PingReq.sc_data)
  return sc_data_.GetNoArena();
}
inline void PingReq::set_sc_data(const ::std::string& value) {
  
  sc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PingReq.sc_data)
}
#if LANG_CXX11
inline void PingReq::set_sc_data(::std::string&& value) {
  
  sc_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PingReq.sc_data)
}
#endif
inline void PingReq::set_sc_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PingReq.sc_data)
}
inline void PingReq::set_sc_data(const void* value, size_t size) {
  
  sc_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PingReq.sc_data)
}
inline ::std::string* PingReq::mutable_sc_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.PingReq.sc_data)
  return sc_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingReq::release_sc_data() {
  // @@protoc_insertion_point(field_release:proto.PingReq.sc_data)
  
  return sc_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingReq::set_allocated_sc_data(::std::string* sc_data) {
  if (sc_data != NULL) {
    
  } else {
    
  }
  sc_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_data);
  // @@protoc_insertion_point(field_set_allocated:proto.PingReq.sc_data)
}

// uint32 seq = 3;
inline void PingReq::clear_seq() {
  seq_ = 0u;
}
inline ::google::protobuf::uint32 PingReq::seq() const {
  // @@protoc_insertion_point(field_get:proto.PingReq.seq)
  return seq_;
}
inline void PingReq::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:proto.PingReq.seq)
}

// -------------------------------------------------------------------

// PingRsp

// uint32 client_time = 15;
inline void PingRsp::clear_client_time() {
  client_time_ = 0u;
}
inline ::google::protobuf::uint32 PingRsp::client_time() const {
  // @@protoc_insertion_point(field_get:proto.PingRsp.client_time)
  return client_time_;
}
inline void PingRsp::set_client_time(::google::protobuf::uint32 value) {
  
  client_time_ = value;
  // @@protoc_insertion_point(field_set:proto.PingRsp.client_time)
}

// int32 retcode = 6;
inline void PingRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 PingRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PingRsp.retcode)
  return retcode_;
}
inline void PingRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PingRsp.retcode)
}

// uint32 seq = 13;
inline void PingRsp::clear_seq() {
  seq_ = 0u;
}
inline ::google::protobuf::uint32 PingRsp::seq() const {
  // @@protoc_insertion_point(field_get:proto.PingRsp.seq)
  return seq_;
}
inline void PingRsp::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:proto.PingRsp.seq)
}

// -------------------------------------------------------------------

// GetOnlinePlayerListReq

// -------------------------------------------------------------------

// GetOnlinePlayerListRsp

// int32 retcode = 7;
inline void GetOnlinePlayerListRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetOnlinePlayerListRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerListRsp.retcode)
  return retcode_;
}
inline void GetOnlinePlayerListRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerListRsp.retcode)
}

// uint32 param = 11;
inline void GetOnlinePlayerListRsp::clear_param() {
  param_ = 0u;
}
inline ::google::protobuf::uint32 GetOnlinePlayerListRsp::param() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerListRsp.param)
  return param_;
}
inline void GetOnlinePlayerListRsp::set_param(::google::protobuf::uint32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerListRsp.param)
}

// repeated .proto.OnlinePlayerInfo player_info_list = 5;
inline int GetOnlinePlayerListRsp::player_info_list_size() const {
  return player_info_list_.size();
}
inline void GetOnlinePlayerListRsp::clear_player_info_list() {
  player_info_list_.Clear();
}
inline const ::proto::OnlinePlayerInfo& GetOnlinePlayerListRsp::player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerListRsp.player_info_list)
  return player_info_list_.Get(index);
}
inline ::proto::OnlinePlayerInfo* GetOnlinePlayerListRsp::mutable_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetOnlinePlayerListRsp.player_info_list)
  return player_info_list_.Mutable(index);
}
inline ::proto::OnlinePlayerInfo* GetOnlinePlayerListRsp::add_player_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetOnlinePlayerListRsp.player_info_list)
  return player_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >*
GetOnlinePlayerListRsp::mutable_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetOnlinePlayerListRsp.player_info_list)
  return &player_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::OnlinePlayerInfo >&
GetOnlinePlayerListRsp::player_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetOnlinePlayerListRsp.player_info_list)
  return player_info_list_;
}

// -------------------------------------------------------------------

// ServerTimeNotify

// uint64 server_time = 5;
inline void ServerTimeNotify::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerTimeNotify::server_time() const {
  // @@protoc_insertion_point(field_get:proto.ServerTimeNotify.server_time)
  return server_time_;
}
inline void ServerTimeNotify::set_server_time(::google::protobuf::uint64 value) {
  
  server_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerTimeNotify.server_time)
}

// -------------------------------------------------------------------

// ServerLogNotify

// string server_log = 7;
inline void ServerLogNotify::clear_server_log() {
  server_log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerLogNotify::server_log() const {
  // @@protoc_insertion_point(field_get:proto.ServerLogNotify.server_log)
  return server_log_.GetNoArena();
}
inline void ServerLogNotify::set_server_log(const ::std::string& value) {
  
  server_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ServerLogNotify.server_log)
}
#if LANG_CXX11
inline void ServerLogNotify::set_server_log(::std::string&& value) {
  
  server_log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ServerLogNotify.server_log)
}
#endif
inline void ServerLogNotify::set_server_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ServerLogNotify.server_log)
}
inline void ServerLogNotify::set_server_log(const char* value, size_t size) {
  
  server_log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ServerLogNotify.server_log)
}
inline ::std::string* ServerLogNotify::mutable_server_log() {
  
  // @@protoc_insertion_point(field_mutable:proto.ServerLogNotify.server_log)
  return server_log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerLogNotify::release_server_log() {
  // @@protoc_insertion_point(field_release:proto.ServerLogNotify.server_log)
  
  return server_log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerLogNotify::set_allocated_server_log(::std::string* server_log) {
  if (server_log != NULL) {
    
  } else {
    
  }
  server_log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_log);
  // @@protoc_insertion_point(field_set_allocated:proto.ServerLogNotify.server_log)
}

// .proto.ServerLogType log_type = 9;
inline void ServerLogNotify::clear_log_type() {
  log_type_ = 0;
}
inline ::proto::ServerLogType ServerLogNotify::log_type() const {
  // @@protoc_insertion_point(field_get:proto.ServerLogNotify.log_type)
  return static_cast< ::proto::ServerLogType >(log_type_);
}
inline void ServerLogNotify::set_log_type(::proto::ServerLogType value) {
  
  log_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerLogNotify.log_type)
}

// .proto.ServerLogLevel log_level = 15;
inline void ServerLogNotify::clear_log_level() {
  log_level_ = 0;
}
inline ::proto::ServerLogLevel ServerLogNotify::log_level() const {
  // @@protoc_insertion_point(field_get:proto.ServerLogNotify.log_level)
  return static_cast< ::proto::ServerLogLevel >(log_level_);
}
inline void ServerLogNotify::set_log_level(::proto::ServerLogLevel value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerLogNotify.log_level)
}

// -------------------------------------------------------------------

// ClientReconnectNotify

// .proto.ClientReconnectReason reason = 6;
inline void ClientReconnectNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::ClientReconnectReason ClientReconnectNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.ClientReconnectNotify.reason)
  return static_cast< ::proto::ClientReconnectReason >(reason_);
}
inline void ClientReconnectNotify::set_reason(::proto::ClientReconnectReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientReconnectNotify.reason)
}

// -------------------------------------------------------------------

// RobotPushPlayerDataNotify

// bytes bin = 6;
inline void RobotPushPlayerDataNotify::clear_bin() {
  bin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RobotPushPlayerDataNotify::bin() const {
  // @@protoc_insertion_point(field_get:proto.RobotPushPlayerDataNotify.bin)
  return bin_.GetNoArena();
}
inline void RobotPushPlayerDataNotify::set_bin(const ::std::string& value) {
  
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RobotPushPlayerDataNotify.bin)
}
#if LANG_CXX11
inline void RobotPushPlayerDataNotify::set_bin(::std::string&& value) {
  
  bin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RobotPushPlayerDataNotify.bin)
}
#endif
inline void RobotPushPlayerDataNotify::set_bin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RobotPushPlayerDataNotify.bin)
}
inline void RobotPushPlayerDataNotify::set_bin(const void* value, size_t size) {
  
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RobotPushPlayerDataNotify.bin)
}
inline ::std::string* RobotPushPlayerDataNotify::mutable_bin() {
  
  // @@protoc_insertion_point(field_mutable:proto.RobotPushPlayerDataNotify.bin)
  return bin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotPushPlayerDataNotify::release_bin() {
  // @@protoc_insertion_point(field_release:proto.RobotPushPlayerDataNotify.bin)
  
  return bin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotPushPlayerDataNotify::set_allocated_bin(::std::string* bin) {
  if (bin != NULL) {
    
  } else {
    
  }
  bin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bin);
  // @@protoc_insertion_point(field_set_allocated:proto.RobotPushPlayerDataNotify.bin)
}

// -------------------------------------------------------------------

// ClientReportNotify

// string report_type = 1;
inline void ClientReportNotify::clear_report_type() {
  report_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientReportNotify::report_type() const {
  // @@protoc_insertion_point(field_get:proto.ClientReportNotify.report_type)
  return report_type_.GetNoArena();
}
inline void ClientReportNotify::set_report_type(const ::std::string& value) {
  
  report_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClientReportNotify.report_type)
}
#if LANG_CXX11
inline void ClientReportNotify::set_report_type(::std::string&& value) {
  
  report_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClientReportNotify.report_type)
}
#endif
inline void ClientReportNotify::set_report_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  report_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClientReportNotify.report_type)
}
inline void ClientReportNotify::set_report_type(const char* value, size_t size) {
  
  report_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClientReportNotify.report_type)
}
inline ::std::string* ClientReportNotify::mutable_report_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClientReportNotify.report_type)
  return report_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientReportNotify::release_report_type() {
  // @@protoc_insertion_point(field_release:proto.ClientReportNotify.report_type)
  
  return report_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientReportNotify::set_allocated_report_type(::std::string* report_type) {
  if (report_type != NULL) {
    
  } else {
    
  }
  report_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_type);
  // @@protoc_insertion_point(field_set_allocated:proto.ClientReportNotify.report_type)
}

// string report_value = 4;
inline void ClientReportNotify::clear_report_value() {
  report_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientReportNotify::report_value() const {
  // @@protoc_insertion_point(field_get:proto.ClientReportNotify.report_value)
  return report_value_.GetNoArena();
}
inline void ClientReportNotify::set_report_value(const ::std::string& value) {
  
  report_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClientReportNotify.report_value)
}
#if LANG_CXX11
inline void ClientReportNotify::set_report_value(::std::string&& value) {
  
  report_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClientReportNotify.report_value)
}
#endif
inline void ClientReportNotify::set_report_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  report_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClientReportNotify.report_value)
}
inline void ClientReportNotify::set_report_value(const char* value, size_t size) {
  
  report_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClientReportNotify.report_value)
}
inline ::std::string* ClientReportNotify::mutable_report_value() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClientReportNotify.report_value)
  return report_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientReportNotify::release_report_value() {
  // @@protoc_insertion_point(field_release:proto.ClientReportNotify.report_value)
  
  return report_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientReportNotify::set_allocated_report_value(::std::string* report_value) {
  if (report_value != NULL) {
    
  } else {
    
  }
  report_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_value);
  // @@protoc_insertion_point(field_set_allocated:proto.ClientReportNotify.report_value)
}

// -------------------------------------------------------------------

// UnionCmd

// bytes body = 14;
inline void UnionCmd::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnionCmd::body() const {
  // @@protoc_insertion_point(field_get:proto.UnionCmd.body)
  return body_.GetNoArena();
}
inline void UnionCmd::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UnionCmd.body)
}
#if LANG_CXX11
inline void UnionCmd::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UnionCmd.body)
}
#endif
inline void UnionCmd::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UnionCmd.body)
}
inline void UnionCmd::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UnionCmd.body)
}
inline ::std::string* UnionCmd::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:proto.UnionCmd.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnionCmd::release_body() {
  // @@protoc_insertion_point(field_release:proto.UnionCmd.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnionCmd::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proto.UnionCmd.body)
}

// uint32 message_id = 8;
inline void UnionCmd::clear_message_id() {
  message_id_ = 0u;
}
inline ::google::protobuf::uint32 UnionCmd::message_id() const {
  // @@protoc_insertion_point(field_get:proto.UnionCmd.message_id)
  return message_id_;
}
inline void UnionCmd::set_message_id(::google::protobuf::uint32 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:proto.UnionCmd.message_id)
}

// -------------------------------------------------------------------

// UnionCmdNotify

// repeated .proto.UnionCmd cmd_list = 1;
inline int UnionCmdNotify::cmd_list_size() const {
  return cmd_list_.size();
}
inline void UnionCmdNotify::clear_cmd_list() {
  cmd_list_.Clear();
}
inline const ::proto::UnionCmd& UnionCmdNotify::cmd_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.UnionCmdNotify.cmd_list)
  return cmd_list_.Get(index);
}
inline ::proto::UnionCmd* UnionCmdNotify::mutable_cmd_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UnionCmdNotify.cmd_list)
  return cmd_list_.Mutable(index);
}
inline ::proto::UnionCmd* UnionCmdNotify::add_cmd_list() {
  // @@protoc_insertion_point(field_add:proto.UnionCmdNotify.cmd_list)
  return cmd_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::UnionCmd >*
UnionCmdNotify::mutable_cmd_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.UnionCmdNotify.cmd_list)
  return &cmd_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::UnionCmd >&
UnionCmdNotify::cmd_list() const {
  // @@protoc_insertion_point(field_list:proto.UnionCmdNotify.cmd_list)
  return cmd_list_;
}

// -------------------------------------------------------------------

// GetOnlinePlayerInfoReq

// bool is_online_id = 15;
inline void GetOnlinePlayerInfoReq::clear_is_online_id() {
  is_online_id_ = false;
}
inline bool GetOnlinePlayerInfoReq::is_online_id() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoReq.is_online_id)
  return is_online_id_;
}
inline void GetOnlinePlayerInfoReq::set_is_online_id(bool value) {
  
  is_online_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.is_online_id)
}

// uint32 target_uid = 9;
inline bool GetOnlinePlayerInfoReq::has_target_uid() const {
  return player_id_case() == kTargetUid;
}
inline void GetOnlinePlayerInfoReq::set_has_target_uid() {
  _oneof_case_[0] = kTargetUid;
}
inline void GetOnlinePlayerInfoReq::clear_target_uid() {
  if (has_target_uid()) {
    player_id_.target_uid_ = 0u;
    clear_has_player_id();
  }
}
inline ::google::protobuf::uint32 GetOnlinePlayerInfoReq::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoReq.target_uid)
  if (has_target_uid()) {
    return player_id_.target_uid_;
  }
  return 0u;
}
inline void GetOnlinePlayerInfoReq::set_target_uid(::google::protobuf::uint32 value) {
  if (!has_target_uid()) {
    clear_player_id();
    set_has_target_uid();
  }
  player_id_.target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.target_uid)
}

// string online_id = 7;
inline bool GetOnlinePlayerInfoReq::has_online_id() const {
  return player_id_case() == kOnlineId;
}
inline void GetOnlinePlayerInfoReq::set_has_online_id() {
  _oneof_case_[0] = kOnlineId;
}
inline void GetOnlinePlayerInfoReq::clear_online_id() {
  if (has_online_id()) {
    player_id_.online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_player_id();
  }
}
inline const ::std::string& GetOnlinePlayerInfoReq::online_id() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoReq.online_id)
  if (has_online_id()) {
    return player_id_.online_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetOnlinePlayerInfoReq::set_online_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.online_id)
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.online_id)
}
#if LANG_CXX11
inline void GetOnlinePlayerInfoReq::set_online_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.online_id)
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetOnlinePlayerInfoReq.online_id)
}
#endif
inline void GetOnlinePlayerInfoReq::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetOnlinePlayerInfoReq.online_id)
}
inline void GetOnlinePlayerInfoReq::set_online_id(const char* value, size_t size) {
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetOnlinePlayerInfoReq.online_id)
}
inline ::std::string* GetOnlinePlayerInfoReq::mutable_online_id() {
  if (!has_online_id()) {
    clear_player_id();
    set_has_online_id();
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.GetOnlinePlayerInfoReq.online_id)
  return player_id_.online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOnlinePlayerInfoReq::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.GetOnlinePlayerInfoReq.online_id)
  if (has_online_id()) {
    clear_has_player_id();
    return player_id_.online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GetOnlinePlayerInfoReq::set_allocated_online_id(::std::string* online_id) {
  if (!has_online_id()) {
    player_id_.online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_player_id();
  if (online_id != NULL) {
    set_has_online_id();
    player_id_.online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        online_id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetOnlinePlayerInfoReq.online_id)
}

// string psn_id = 2;
inline bool GetOnlinePlayerInfoReq::has_psn_id() const {
  return player_id_case() == kPsnId;
}
inline void GetOnlinePlayerInfoReq::set_has_psn_id() {
  _oneof_case_[0] = kPsnId;
}
inline void GetOnlinePlayerInfoReq::clear_psn_id() {
  if (has_psn_id()) {
    player_id_.psn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_player_id();
  }
}
inline const ::std::string& GetOnlinePlayerInfoReq::psn_id() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoReq.psn_id)
  if (has_psn_id()) {
    return player_id_.psn_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetOnlinePlayerInfoReq::set_psn_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.psn_id)
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.psn_id)
}
#if LANG_CXX11
inline void GetOnlinePlayerInfoReq::set_psn_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoReq.psn_id)
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetOnlinePlayerInfoReq.psn_id)
}
#endif
inline void GetOnlinePlayerInfoReq::set_psn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetOnlinePlayerInfoReq.psn_id)
}
inline void GetOnlinePlayerInfoReq::set_psn_id(const char* value, size_t size) {
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  player_id_.psn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetOnlinePlayerInfoReq.psn_id)
}
inline ::std::string* GetOnlinePlayerInfoReq::mutable_psn_id() {
  if (!has_psn_id()) {
    clear_player_id();
    set_has_psn_id();
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.GetOnlinePlayerInfoReq.psn_id)
  return player_id_.psn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOnlinePlayerInfoReq::release_psn_id() {
  // @@protoc_insertion_point(field_release:proto.GetOnlinePlayerInfoReq.psn_id)
  if (has_psn_id()) {
    clear_has_player_id();
    return player_id_.psn_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void GetOnlinePlayerInfoReq::set_allocated_psn_id(::std::string* psn_id) {
  if (!has_psn_id()) {
    player_id_.psn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_player_id();
  if (psn_id != NULL) {
    set_has_psn_id();
    player_id_.psn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        psn_id);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetOnlinePlayerInfoReq.psn_id)
}

inline bool GetOnlinePlayerInfoReq::has_player_id() const {
  return player_id_case() != PLAYER_ID_NOT_SET;
}
inline void GetOnlinePlayerInfoReq::clear_has_player_id() {
  _oneof_case_[0] = PLAYER_ID_NOT_SET;
}
inline GetOnlinePlayerInfoReq::PlayerIdCase GetOnlinePlayerInfoReq::player_id_case() const {
  return GetOnlinePlayerInfoReq::PlayerIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetOnlinePlayerInfoRsp

// int32 retcode = 11;
inline void GetOnlinePlayerInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetOnlinePlayerInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoRsp.retcode)
  return retcode_;
}
inline void GetOnlinePlayerInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoRsp.retcode)
}

// uint32 target_uid = 7;
inline void GetOnlinePlayerInfoRsp::clear_target_uid() {
  target_uid_ = 0u;
}
inline ::google::protobuf::uint32 GetOnlinePlayerInfoRsp::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoRsp.target_uid)
  return target_uid_;
}
inline void GetOnlinePlayerInfoRsp::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoRsp.target_uid)
}

// uint32 param = 4;
inline void GetOnlinePlayerInfoRsp::clear_param() {
  param_ = 0u;
}
inline ::google::protobuf::uint32 GetOnlinePlayerInfoRsp::param() const {
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoRsp.param)
  return param_;
}
inline void GetOnlinePlayerInfoRsp::set_param(::google::protobuf::uint32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.GetOnlinePlayerInfoRsp.param)
}

// .proto.OnlinePlayerInfo target_player_info = 14;
inline bool GetOnlinePlayerInfoRsp::has_target_player_info() const {
  return this != internal_default_instance() && target_player_info_ != NULL;
}
inline void GetOnlinePlayerInfoRsp::clear_target_player_info() {
  if (GetArenaNoVirtual() == NULL && target_player_info_ != NULL) delete target_player_info_;
  target_player_info_ = NULL;
}
inline const ::proto::OnlinePlayerInfo& GetOnlinePlayerInfoRsp::target_player_info() const {
  const ::proto::OnlinePlayerInfo* p = target_player_info_;
  // @@protoc_insertion_point(field_get:proto.GetOnlinePlayerInfoRsp.target_player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
inline ::proto::OnlinePlayerInfo* GetOnlinePlayerInfoRsp::mutable_target_player_info() {
  
  if (target_player_info_ == NULL) {
    target_player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetOnlinePlayerInfoRsp.target_player_info)
  return target_player_info_;
}
inline ::proto::OnlinePlayerInfo* GetOnlinePlayerInfoRsp::release_target_player_info() {
  // @@protoc_insertion_point(field_release:proto.GetOnlinePlayerInfoRsp.target_player_info)
  
  ::proto::OnlinePlayerInfo* temp = target_player_info_;
  target_player_info_ = NULL;
  return temp;
}
inline void GetOnlinePlayerInfoRsp::set_allocated_target_player_info(::proto::OnlinePlayerInfo* target_player_info) {
  delete target_player_info_;
  target_player_info_ = target_player_info;
  if (target_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetOnlinePlayerInfoRsp.target_player_info)
}

// -------------------------------------------------------------------

// SegmentInfo

// uint32 offset = 3;
inline void SegmentInfo::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 SegmentInfo::offset() const {
  // @@protoc_insertion_point(field_get:proto.SegmentInfo.offset)
  return offset_;
}
inline void SegmentInfo::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentInfo.offset)
}

// uint32 module = 7;
inline void SegmentInfo::clear_module() {
  module_ = 0u;
}
inline ::google::protobuf::uint32 SegmentInfo::module() const {
  // @@protoc_insertion_point(field_get:proto.SegmentInfo.module)
  return module_;
}
inline void SegmentInfo::set_module(::google::protobuf::uint32 value) {
  
  module_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentInfo.module)
}

// uint32 size = 8;
inline void SegmentInfo::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 SegmentInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.SegmentInfo.size)
  return size_;
}
inline void SegmentInfo::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentInfo.size)
}

// -------------------------------------------------------------------

// SegmentCRCInfo

// uint32 module = 13;
inline void SegmentCRCInfo::clear_module() {
  module_ = 0u;
}
inline ::google::protobuf::uint32 SegmentCRCInfo::module() const {
  // @@protoc_insertion_point(field_get:proto.SegmentCRCInfo.module)
  return module_;
}
inline void SegmentCRCInfo::set_module(::google::protobuf::uint32 value) {
  
  module_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentCRCInfo.module)
}

// int32 retcode = 5;
inline void SegmentCRCInfo::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SegmentCRCInfo::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SegmentCRCInfo.retcode)
  return retcode_;
}
inline void SegmentCRCInfo::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentCRCInfo.retcode)
}

// uint32 size = 10;
inline void SegmentCRCInfo::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 SegmentCRCInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.SegmentCRCInfo.size)
  return size_;
}
inline void SegmentCRCInfo::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentCRCInfo.size)
}

// string crc = 3;
inline void SegmentCRCInfo::clear_crc() {
  crc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SegmentCRCInfo::crc() const {
  // @@protoc_insertion_point(field_get:proto.SegmentCRCInfo.crc)
  return crc_.GetNoArena();
}
inline void SegmentCRCInfo::set_crc(const ::std::string& value) {
  
  crc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SegmentCRCInfo.crc)
}
#if LANG_CXX11
inline void SegmentCRCInfo::set_crc(::std::string&& value) {
  
  crc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SegmentCRCInfo.crc)
}
#endif
inline void SegmentCRCInfo::set_crc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SegmentCRCInfo.crc)
}
inline void SegmentCRCInfo::set_crc(const char* value, size_t size) {
  
  crc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SegmentCRCInfo.crc)
}
inline ::std::string* SegmentCRCInfo::mutable_crc() {
  
  // @@protoc_insertion_point(field_mutable:proto.SegmentCRCInfo.crc)
  return crc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegmentCRCInfo::release_crc() {
  // @@protoc_insertion_point(field_release:proto.SegmentCRCInfo.crc)
  
  return crc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentCRCInfo::set_allocated_crc(::std::string* crc) {
  if (crc != NULL) {
    
  } else {
    
  }
  crc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crc);
  // @@protoc_insertion_point(field_set_allocated:proto.SegmentCRCInfo.crc)
}

// uint32 offset = 11;
inline void SegmentCRCInfo::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 SegmentCRCInfo::offset() const {
  // @@protoc_insertion_point(field_get:proto.SegmentCRCInfo.offset)
  return offset_;
}
inline void SegmentCRCInfo::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:proto.SegmentCRCInfo.offset)
}

// -------------------------------------------------------------------

// CheckSegmentCRCNotify

// repeated .proto.SegmentInfo info_list = 6;
inline int CheckSegmentCRCNotify::info_list_size() const {
  return info_list_.size();
}
inline void CheckSegmentCRCNotify::clear_info_list() {
  info_list_.Clear();
}
inline const ::proto::SegmentInfo& CheckSegmentCRCNotify::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CheckSegmentCRCNotify.info_list)
  return info_list_.Get(index);
}
inline ::proto::SegmentInfo* CheckSegmentCRCNotify::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CheckSegmentCRCNotify.info_list)
  return info_list_.Mutable(index);
}
inline ::proto::SegmentInfo* CheckSegmentCRCNotify::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.CheckSegmentCRCNotify.info_list)
  return info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::SegmentInfo >*
CheckSegmentCRCNotify::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CheckSegmentCRCNotify.info_list)
  return &info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::SegmentInfo >&
CheckSegmentCRCNotify::info_list() const {
  // @@protoc_insertion_point(field_list:proto.CheckSegmentCRCNotify.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// CheckSegmentCRCReq

// repeated .proto.SegmentCRCInfo info_list = 1;
inline int CheckSegmentCRCReq::info_list_size() const {
  return info_list_.size();
}
inline void CheckSegmentCRCReq::clear_info_list() {
  info_list_.Clear();
}
inline const ::proto::SegmentCRCInfo& CheckSegmentCRCReq::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CheckSegmentCRCReq.info_list)
  return info_list_.Get(index);
}
inline ::proto::SegmentCRCInfo* CheckSegmentCRCReq::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CheckSegmentCRCReq.info_list)
  return info_list_.Mutable(index);
}
inline ::proto::SegmentCRCInfo* CheckSegmentCRCReq::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.CheckSegmentCRCReq.info_list)
  return info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::SegmentCRCInfo >*
CheckSegmentCRCReq::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CheckSegmentCRCReq.info_list)
  return &info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::SegmentCRCInfo >&
CheckSegmentCRCReq::info_list() const {
  // @@protoc_insertion_point(field_list:proto.CheckSegmentCRCReq.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// PlayerRTTInfo

// uint32 rtt = 2;
inline void PlayerRTTInfo::clear_rtt() {
  rtt_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRTTInfo::rtt() const {
  // @@protoc_insertion_point(field_get:proto.PlayerRTTInfo.rtt)
  return rtt_;
}
inline void PlayerRTTInfo::set_rtt(::google::protobuf::uint32 value) {
  
  rtt_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerRTTInfo.rtt)
}

// uint32 uid = 1;
inline void PlayerRTTInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerRTTInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.PlayerRTTInfo.uid)
  return uid_;
}
inline void PlayerRTTInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerRTTInfo.uid)
}

// -------------------------------------------------------------------

// WorldPlayerRTTNotify

// repeated .proto.PlayerRTTInfo player_rtt_list = 1;
inline int WorldPlayerRTTNotify::player_rtt_list_size() const {
  return player_rtt_list_.size();
}
inline void WorldPlayerRTTNotify::clear_player_rtt_list() {
  player_rtt_list_.Clear();
}
inline const ::proto::PlayerRTTInfo& WorldPlayerRTTNotify::player_rtt_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.WorldPlayerRTTNotify.player_rtt_list)
  return player_rtt_list_.Get(index);
}
inline ::proto::PlayerRTTInfo* WorldPlayerRTTNotify::mutable_player_rtt_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.WorldPlayerRTTNotify.player_rtt_list)
  return player_rtt_list_.Mutable(index);
}
inline ::proto::PlayerRTTInfo* WorldPlayerRTTNotify::add_player_rtt_list() {
  // @@protoc_insertion_point(field_add:proto.WorldPlayerRTTNotify.player_rtt_list)
  return player_rtt_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::PlayerRTTInfo >*
WorldPlayerRTTNotify::mutable_player_rtt_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.WorldPlayerRTTNotify.player_rtt_list)
  return &player_rtt_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::PlayerRTTInfo >&
WorldPlayerRTTNotify::player_rtt_list() const {
  // @@protoc_insertion_point(field_list:proto.WorldPlayerRTTNotify.player_rtt_list)
  return player_rtt_list_;
}

// -------------------------------------------------------------------

// EchoNotify

// uint32 seq_id = 4;
inline void EchoNotify::clear_seq_id() {
  seq_id_ = 0u;
}
inline ::google::protobuf::uint32 EchoNotify::seq_id() const {
  // @@protoc_insertion_point(field_get:proto.EchoNotify.seq_id)
  return seq_id_;
}
inline void EchoNotify::set_seq_id(::google::protobuf::uint32 value) {
  
  seq_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EchoNotify.seq_id)
}

// string content = 9;
inline void EchoNotify::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoNotify::content() const {
  // @@protoc_insertion_point(field_get:proto.EchoNotify.content)
  return content_.GetNoArena();
}
inline void EchoNotify::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.EchoNotify.content)
}
#if LANG_CXX11
inline void EchoNotify::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.EchoNotify.content)
}
#endif
inline void EchoNotify::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.EchoNotify.content)
}
inline void EchoNotify::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.EchoNotify.content)
}
inline ::std::string* EchoNotify::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.EchoNotify.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoNotify::release_content() {
  // @@protoc_insertion_point(field_release:proto.EchoNotify.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoNotify::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:proto.EchoNotify.content)
}

// -------------------------------------------------------------------

// UpdateRedPointNotify

// repeated .proto.RedPointData red_point_list = 12;
inline int UpdateRedPointNotify::red_point_list_size() const {
  return red_point_list_.size();
}
inline void UpdateRedPointNotify::clear_red_point_list() {
  red_point_list_.Clear();
}
inline const ::proto::RedPointData& UpdateRedPointNotify::red_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateRedPointNotify.red_point_list)
  return red_point_list_.Get(index);
}
inline ::proto::RedPointData* UpdateRedPointNotify::mutable_red_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateRedPointNotify.red_point_list)
  return red_point_list_.Mutable(index);
}
inline ::proto::RedPointData* UpdateRedPointNotify::add_red_point_list() {
  // @@protoc_insertion_point(field_add:proto.UpdateRedPointNotify.red_point_list)
  return red_point_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::RedPointData >*
UpdateRedPointNotify::mutable_red_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateRedPointNotify.red_point_list)
  return &red_point_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::RedPointData >&
UpdateRedPointNotify::red_point_list() const {
  // @@protoc_insertion_point(field_list:proto.UpdateRedPointNotify.red_point_list)
  return red_point_list_;
}

// -------------------------------------------------------------------

// ClientBulletCreateNotify

// uint32 param = 6;
inline void ClientBulletCreateNotify::clear_param() {
  param_ = 0u;
}
inline ::google::protobuf::uint32 ClientBulletCreateNotify::param() const {
  // @@protoc_insertion_point(field_get:proto.ClientBulletCreateNotify.param)
  return param_;
}
inline void ClientBulletCreateNotify::set_param(::google::protobuf::uint32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientBulletCreateNotify.param)
}

// -------------------------------------------------------------------

// ChangeServerGlobalValueNotify

// uint32 entity_id = 4;
inline void ChangeServerGlobalValueNotify::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 ChangeServerGlobalValueNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ChangeServerGlobalValueNotify.entity_id)
  return entity_id_;
}
inline void ChangeServerGlobalValueNotify::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChangeServerGlobalValueNotify.entity_id)
}

// -------------------------------------------------------------------

// GmTalkNotify

// string msg = 5;
inline void GmTalkNotify::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GmTalkNotify::msg() const {
  // @@protoc_insertion_point(field_get:proto.GmTalkNotify.msg)
  return msg_.GetNoArena();
}
inline void GmTalkNotify::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GmTalkNotify.msg)
}
#if LANG_CXX11
inline void GmTalkNotify::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GmTalkNotify.msg)
}
#endif
inline void GmTalkNotify::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GmTalkNotify.msg)
}
inline void GmTalkNotify::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GmTalkNotify.msg)
}
inline ::std::string* GmTalkNotify::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.GmTalkNotify.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GmTalkNotify::release_msg() {
  // @@protoc_insertion_point(field_release:proto.GmTalkNotify.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GmTalkNotify::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.GmTalkNotify.msg)
}

// -------------------------------------------------------------------

// LastPacketPrintNotify

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::KeepAliveNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::KeepAliveNotify_CmdId>() {
  return ::proto::KeepAliveNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GmTalkReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GmTalkReq_CmdId>() {
  return ::proto::GmTalkReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GmTalkRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GmTalkRsp_CmdId>() {
  return ::proto::GmTalkRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ShowMessageNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ShowMessageNotify_CmdId>() {
  return ::proto::ShowMessageNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PingReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PingReq_CmdId>() {
  return ::proto::PingReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::PingRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PingRsp_CmdId>() {
  return ::proto::PingRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetOnlinePlayerListReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetOnlinePlayerListReq_CmdId>() {
  return ::proto::GetOnlinePlayerListReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetOnlinePlayerListRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetOnlinePlayerListRsp_CmdId>() {
  return ::proto::GetOnlinePlayerListRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ServerTimeNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerTimeNotify_CmdId>() {
  return ::proto::ServerTimeNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ServerLogNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerLogNotify_CmdId>() {
  return ::proto::ServerLogNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ClientReconnectNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ClientReconnectNotify_CmdId>() {
  return ::proto::ClientReconnectNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::RobotPushPlayerDataNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::RobotPushPlayerDataNotify_CmdId>() {
  return ::proto::RobotPushPlayerDataNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ClientReportNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ClientReportNotify_CmdId>() {
  return ::proto::ClientReportNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::UnionCmdNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::UnionCmdNotify_CmdId>() {
  return ::proto::UnionCmdNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetOnlinePlayerInfoReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetOnlinePlayerInfoReq_CmdId>() {
  return ::proto::GetOnlinePlayerInfoReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetOnlinePlayerInfoRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetOnlinePlayerInfoRsp_CmdId>() {
  return ::proto::GetOnlinePlayerInfoRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::CheckSegmentCRCNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::CheckSegmentCRCNotify_CmdId>() {
  return ::proto::CheckSegmentCRCNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::CheckSegmentCRCReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::CheckSegmentCRCReq_CmdId>() {
  return ::proto::CheckSegmentCRCReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::WorldPlayerRTTNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::WorldPlayerRTTNotify_CmdId>() {
  return ::proto::WorldPlayerRTTNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::EchoNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::EchoNotify_CmdId>() {
  return ::proto::EchoNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::UpdateRedPointNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::UpdateRedPointNotify_CmdId>() {
  return ::proto::UpdateRedPointNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ClientBulletCreateNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ClientBulletCreateNotify_CmdId>() {
  return ::proto::ClientBulletCreateNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::ChangeServerGlobalValueNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ChangeServerGlobalValueNotify_CmdId>() {
  return ::proto::ChangeServerGlobalValueNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GmTalkNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GmTalkNotify_CmdId>() {
  return ::proto::GmTalkNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::LastPacketPrintNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::LastPacketPrintNotify_CmdId>() {
  return ::proto::LastPacketPrintNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::SvrMsgId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SvrMsgId>() {
  return ::proto::SvrMsgId_descriptor();
}
template <> struct is_proto_enum< ::proto::ServerLogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerLogType>() {
  return ::proto::ServerLogType_descriptor();
}
template <> struct is_proto_enum< ::proto::ServerLogLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ServerLogLevel>() {
  return ::proto::ServerLogLevel_descriptor();
}
template <> struct is_proto_enum< ::proto::ClientReconnectReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ClientReconnectReason>() {
  return ::proto::ClientReconnectReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fmisc_2eproto__INCLUDED
