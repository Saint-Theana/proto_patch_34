// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_hunting.proto

#ifndef PROTOBUF_cmd_2fcmd_5fhunting_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fhunting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class GetCityHuntingOfferReq;
class GetCityHuntingOfferReqDefaultTypeInternal;
extern GetCityHuntingOfferReqDefaultTypeInternal _GetCityHuntingOfferReq_default_instance_;
class GetCityHuntingOfferRsp;
class GetCityHuntingOfferRspDefaultTypeInternal;
extern GetCityHuntingOfferRspDefaultTypeInternal _GetCityHuntingOfferRsp_default_instance_;
class GetHuntingOfferRewardReq;
class GetHuntingOfferRewardReqDefaultTypeInternal;
extern GetHuntingOfferRewardReqDefaultTypeInternal _GetHuntingOfferRewardReq_default_instance_;
class GetHuntingOfferRewardRsp;
class GetHuntingOfferRewardRspDefaultTypeInternal;
extern GetHuntingOfferRewardRspDefaultTypeInternal _GetHuntingOfferRewardRsp_default_instance_;
class HuntingFailNotify;
class HuntingFailNotifyDefaultTypeInternal;
extern HuntingFailNotifyDefaultTypeInternal _HuntingFailNotify_default_instance_;
class HuntingGiveUpReq;
class HuntingGiveUpReqDefaultTypeInternal;
extern HuntingGiveUpReqDefaultTypeInternal _HuntingGiveUpReq_default_instance_;
class HuntingGiveUpRsp;
class HuntingGiveUpRspDefaultTypeInternal;
extern HuntingGiveUpRspDefaultTypeInternal _HuntingGiveUpRsp_default_instance_;
class HuntingOfferData;
class HuntingOfferDataDefaultTypeInternal;
extern HuntingOfferDataDefaultTypeInternal _HuntingOfferData_default_instance_;
class HuntingOngoingNotify;
class HuntingOngoingNotifyDefaultTypeInternal;
extern HuntingOngoingNotifyDefaultTypeInternal _HuntingOngoingNotify_default_instance_;
class HuntingPair;
class HuntingPairDefaultTypeInternal;
extern HuntingPairDefaultTypeInternal _HuntingPair_default_instance_;
class HuntingRevealClueNotify;
class HuntingRevealClueNotifyDefaultTypeInternal;
extern HuntingRevealClueNotifyDefaultTypeInternal _HuntingRevealClueNotify_default_instance_;
class HuntingRevealFinalNotify;
class HuntingRevealFinalNotifyDefaultTypeInternal;
extern HuntingRevealFinalNotifyDefaultTypeInternal _HuntingRevealFinalNotify_default_instance_;
class HuntingStartNotify;
class HuntingStartNotifyDefaultTypeInternal;
extern HuntingStartNotifyDefaultTypeInternal _HuntingStartNotify_default_instance_;
class HuntingSuccessNotify;
class HuntingSuccessNotifyDefaultTypeInternal;
extern HuntingSuccessNotifyDefaultTypeInternal _HuntingSuccessNotify_default_instance_;
class TakeHuntingOfferReq;
class TakeHuntingOfferReqDefaultTypeInternal;
extern TakeHuntingOfferReqDefaultTypeInternal _TakeHuntingOfferReq_default_instance_;
class TakeHuntingOfferRsp;
class TakeHuntingOfferRspDefaultTypeInternal;
extern TakeHuntingOfferRspDefaultTypeInternal _TakeHuntingOfferRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fhunting_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fhunting_2eproto

enum TakeHuntingOfferReq_CmdId {
  TakeHuntingOfferReq_CmdId_NONE = 0,
  TakeHuntingOfferReq_CmdId_CMD_ID = 4326,
  TakeHuntingOfferReq_CmdId_ENET_CHANNEL_ID = 0,
  TakeHuntingOfferReq_CmdId_ENET_IS_RELIABLE = 1,
  TakeHuntingOfferReq_CmdId_IS_ALLOW_CLIENT = 1,
  TakeHuntingOfferReq_CmdId_TakeHuntingOfferReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TakeHuntingOfferReq_CmdId_TakeHuntingOfferReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TakeHuntingOfferReq_CmdId_IsValid(int value);
const TakeHuntingOfferReq_CmdId TakeHuntingOfferReq_CmdId_CmdId_MIN = TakeHuntingOfferReq_CmdId_NONE;
const TakeHuntingOfferReq_CmdId TakeHuntingOfferReq_CmdId_CmdId_MAX = TakeHuntingOfferReq_CmdId_CMD_ID;
const int TakeHuntingOfferReq_CmdId_CmdId_ARRAYSIZE = TakeHuntingOfferReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeHuntingOfferReq_CmdId_descriptor();
inline const ::std::string& TakeHuntingOfferReq_CmdId_Name(TakeHuntingOfferReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeHuntingOfferReq_CmdId_descriptor(), value);
}
inline bool TakeHuntingOfferReq_CmdId_Parse(
    const ::std::string& name, TakeHuntingOfferReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeHuntingOfferReq_CmdId>(
    TakeHuntingOfferReq_CmdId_descriptor(), name, value);
}
enum TakeHuntingOfferRsp_CmdId {
  TakeHuntingOfferRsp_CmdId_NONE = 0,
  TakeHuntingOfferRsp_CmdId_CMD_ID = 4318,
  TakeHuntingOfferRsp_CmdId_ENET_CHANNEL_ID = 0,
  TakeHuntingOfferRsp_CmdId_ENET_IS_RELIABLE = 1,
  TakeHuntingOfferRsp_CmdId_TakeHuntingOfferRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TakeHuntingOfferRsp_CmdId_TakeHuntingOfferRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TakeHuntingOfferRsp_CmdId_IsValid(int value);
const TakeHuntingOfferRsp_CmdId TakeHuntingOfferRsp_CmdId_CmdId_MIN = TakeHuntingOfferRsp_CmdId_NONE;
const TakeHuntingOfferRsp_CmdId TakeHuntingOfferRsp_CmdId_CmdId_MAX = TakeHuntingOfferRsp_CmdId_CMD_ID;
const int TakeHuntingOfferRsp_CmdId_CmdId_ARRAYSIZE = TakeHuntingOfferRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TakeHuntingOfferRsp_CmdId_descriptor();
inline const ::std::string& TakeHuntingOfferRsp_CmdId_Name(TakeHuntingOfferRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TakeHuntingOfferRsp_CmdId_descriptor(), value);
}
inline bool TakeHuntingOfferRsp_CmdId_Parse(
    const ::std::string& name, TakeHuntingOfferRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakeHuntingOfferRsp_CmdId>(
    TakeHuntingOfferRsp_CmdId_descriptor(), name, value);
}
enum GetCityHuntingOfferReq_CmdId {
  GetCityHuntingOfferReq_CmdId_NONE = 0,
  GetCityHuntingOfferReq_CmdId_CMD_ID = 4325,
  GetCityHuntingOfferReq_CmdId_ENET_CHANNEL_ID = 0,
  GetCityHuntingOfferReq_CmdId_ENET_IS_RELIABLE = 1,
  GetCityHuntingOfferReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetCityHuntingOfferReq_CmdId_GetCityHuntingOfferReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetCityHuntingOfferReq_CmdId_GetCityHuntingOfferReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetCityHuntingOfferReq_CmdId_IsValid(int value);
const GetCityHuntingOfferReq_CmdId GetCityHuntingOfferReq_CmdId_CmdId_MIN = GetCityHuntingOfferReq_CmdId_NONE;
const GetCityHuntingOfferReq_CmdId GetCityHuntingOfferReq_CmdId_CmdId_MAX = GetCityHuntingOfferReq_CmdId_CMD_ID;
const int GetCityHuntingOfferReq_CmdId_CmdId_ARRAYSIZE = GetCityHuntingOfferReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetCityHuntingOfferReq_CmdId_descriptor();
inline const ::std::string& GetCityHuntingOfferReq_CmdId_Name(GetCityHuntingOfferReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetCityHuntingOfferReq_CmdId_descriptor(), value);
}
inline bool GetCityHuntingOfferReq_CmdId_Parse(
    const ::std::string& name, GetCityHuntingOfferReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetCityHuntingOfferReq_CmdId>(
    GetCityHuntingOfferReq_CmdId_descriptor(), name, value);
}
enum GetCityHuntingOfferRsp_CmdId {
  GetCityHuntingOfferRsp_CmdId_NONE = 0,
  GetCityHuntingOfferRsp_CmdId_CMD_ID = 4307,
  GetCityHuntingOfferRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetCityHuntingOfferRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetCityHuntingOfferRsp_CmdId_GetCityHuntingOfferRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetCityHuntingOfferRsp_CmdId_GetCityHuntingOfferRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetCityHuntingOfferRsp_CmdId_IsValid(int value);
const GetCityHuntingOfferRsp_CmdId GetCityHuntingOfferRsp_CmdId_CmdId_MIN = GetCityHuntingOfferRsp_CmdId_NONE;
const GetCityHuntingOfferRsp_CmdId GetCityHuntingOfferRsp_CmdId_CmdId_MAX = GetCityHuntingOfferRsp_CmdId_CMD_ID;
const int GetCityHuntingOfferRsp_CmdId_CmdId_ARRAYSIZE = GetCityHuntingOfferRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetCityHuntingOfferRsp_CmdId_descriptor();
inline const ::std::string& GetCityHuntingOfferRsp_CmdId_Name(GetCityHuntingOfferRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetCityHuntingOfferRsp_CmdId_descriptor(), value);
}
inline bool GetCityHuntingOfferRsp_CmdId_Parse(
    const ::std::string& name, GetCityHuntingOfferRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetCityHuntingOfferRsp_CmdId>(
    GetCityHuntingOfferRsp_CmdId_descriptor(), name, value);
}
enum GetHuntingOfferRewardReq_CmdId {
  GetHuntingOfferRewardReq_CmdId_NONE = 0,
  GetHuntingOfferRewardReq_CmdId_CMD_ID = 4302,
  GetHuntingOfferRewardReq_CmdId_ENET_CHANNEL_ID = 0,
  GetHuntingOfferRewardReq_CmdId_ENET_IS_RELIABLE = 1,
  GetHuntingOfferRewardReq_CmdId_IS_ALLOW_CLIENT = 1,
  GetHuntingOfferRewardReq_CmdId_GetHuntingOfferRewardReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetHuntingOfferRewardReq_CmdId_GetHuntingOfferRewardReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetHuntingOfferRewardReq_CmdId_IsValid(int value);
const GetHuntingOfferRewardReq_CmdId GetHuntingOfferRewardReq_CmdId_CmdId_MIN = GetHuntingOfferRewardReq_CmdId_NONE;
const GetHuntingOfferRewardReq_CmdId GetHuntingOfferRewardReq_CmdId_CmdId_MAX = GetHuntingOfferRewardReq_CmdId_CMD_ID;
const int GetHuntingOfferRewardReq_CmdId_CmdId_ARRAYSIZE = GetHuntingOfferRewardReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetHuntingOfferRewardReq_CmdId_descriptor();
inline const ::std::string& GetHuntingOfferRewardReq_CmdId_Name(GetHuntingOfferRewardReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetHuntingOfferRewardReq_CmdId_descriptor(), value);
}
inline bool GetHuntingOfferRewardReq_CmdId_Parse(
    const ::std::string& name, GetHuntingOfferRewardReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetHuntingOfferRewardReq_CmdId>(
    GetHuntingOfferRewardReq_CmdId_descriptor(), name, value);
}
enum GetHuntingOfferRewardRsp_CmdId {
  GetHuntingOfferRewardRsp_CmdId_NONE = 0,
  GetHuntingOfferRewardRsp_CmdId_CMD_ID = 4331,
  GetHuntingOfferRewardRsp_CmdId_ENET_CHANNEL_ID = 0,
  GetHuntingOfferRewardRsp_CmdId_ENET_IS_RELIABLE = 1,
  GetHuntingOfferRewardRsp_CmdId_GetHuntingOfferRewardRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetHuntingOfferRewardRsp_CmdId_GetHuntingOfferRewardRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetHuntingOfferRewardRsp_CmdId_IsValid(int value);
const GetHuntingOfferRewardRsp_CmdId GetHuntingOfferRewardRsp_CmdId_CmdId_MIN = GetHuntingOfferRewardRsp_CmdId_NONE;
const GetHuntingOfferRewardRsp_CmdId GetHuntingOfferRewardRsp_CmdId_CmdId_MAX = GetHuntingOfferRewardRsp_CmdId_CMD_ID;
const int GetHuntingOfferRewardRsp_CmdId_CmdId_ARRAYSIZE = GetHuntingOfferRewardRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetHuntingOfferRewardRsp_CmdId_descriptor();
inline const ::std::string& GetHuntingOfferRewardRsp_CmdId_Name(GetHuntingOfferRewardRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetHuntingOfferRewardRsp_CmdId_descriptor(), value);
}
inline bool GetHuntingOfferRewardRsp_CmdId_Parse(
    const ::std::string& name, GetHuntingOfferRewardRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetHuntingOfferRewardRsp_CmdId>(
    GetHuntingOfferRewardRsp_CmdId_descriptor(), name, value);
}
enum HuntingStartNotify_CmdId {
  HuntingStartNotify_CmdId_NONE = 0,
  HuntingStartNotify_CmdId_CMD_ID = 4329,
  HuntingStartNotify_CmdId_ENET_CHANNEL_ID = 0,
  HuntingStartNotify_CmdId_ENET_IS_RELIABLE = 1,
  HuntingStartNotify_CmdId_HuntingStartNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingStartNotify_CmdId_HuntingStartNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingStartNotify_CmdId_IsValid(int value);
const HuntingStartNotify_CmdId HuntingStartNotify_CmdId_CmdId_MIN = HuntingStartNotify_CmdId_NONE;
const HuntingStartNotify_CmdId HuntingStartNotify_CmdId_CmdId_MAX = HuntingStartNotify_CmdId_CMD_ID;
const int HuntingStartNotify_CmdId_CmdId_ARRAYSIZE = HuntingStartNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingStartNotify_CmdId_descriptor();
inline const ::std::string& HuntingStartNotify_CmdId_Name(HuntingStartNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingStartNotify_CmdId_descriptor(), value);
}
inline bool HuntingStartNotify_CmdId_Parse(
    const ::std::string& name, HuntingStartNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingStartNotify_CmdId>(
    HuntingStartNotify_CmdId_descriptor(), name, value);
}
enum HuntingRevealClueNotify_CmdId {
  HuntingRevealClueNotify_CmdId_NONE = 0,
  HuntingRevealClueNotify_CmdId_CMD_ID = 4322,
  HuntingRevealClueNotify_CmdId_ENET_CHANNEL_ID = 0,
  HuntingRevealClueNotify_CmdId_ENET_IS_RELIABLE = 1,
  HuntingRevealClueNotify_CmdId_HuntingRevealClueNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingRevealClueNotify_CmdId_HuntingRevealClueNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingRevealClueNotify_CmdId_IsValid(int value);
const HuntingRevealClueNotify_CmdId HuntingRevealClueNotify_CmdId_CmdId_MIN = HuntingRevealClueNotify_CmdId_NONE;
const HuntingRevealClueNotify_CmdId HuntingRevealClueNotify_CmdId_CmdId_MAX = HuntingRevealClueNotify_CmdId_CMD_ID;
const int HuntingRevealClueNotify_CmdId_CmdId_ARRAYSIZE = HuntingRevealClueNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingRevealClueNotify_CmdId_descriptor();
inline const ::std::string& HuntingRevealClueNotify_CmdId_Name(HuntingRevealClueNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingRevealClueNotify_CmdId_descriptor(), value);
}
inline bool HuntingRevealClueNotify_CmdId_Parse(
    const ::std::string& name, HuntingRevealClueNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingRevealClueNotify_CmdId>(
    HuntingRevealClueNotify_CmdId_descriptor(), name, value);
}
enum HuntingRevealFinalNotify_CmdId {
  HuntingRevealFinalNotify_CmdId_NONE = 0,
  HuntingRevealFinalNotify_CmdId_CMD_ID = 4344,
  HuntingRevealFinalNotify_CmdId_ENET_CHANNEL_ID = 0,
  HuntingRevealFinalNotify_CmdId_ENET_IS_RELIABLE = 1,
  HuntingRevealFinalNotify_CmdId_HuntingRevealFinalNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingRevealFinalNotify_CmdId_HuntingRevealFinalNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingRevealFinalNotify_CmdId_IsValid(int value);
const HuntingRevealFinalNotify_CmdId HuntingRevealFinalNotify_CmdId_CmdId_MIN = HuntingRevealFinalNotify_CmdId_NONE;
const HuntingRevealFinalNotify_CmdId HuntingRevealFinalNotify_CmdId_CmdId_MAX = HuntingRevealFinalNotify_CmdId_CMD_ID;
const int HuntingRevealFinalNotify_CmdId_CmdId_ARRAYSIZE = HuntingRevealFinalNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingRevealFinalNotify_CmdId_descriptor();
inline const ::std::string& HuntingRevealFinalNotify_CmdId_Name(HuntingRevealFinalNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingRevealFinalNotify_CmdId_descriptor(), value);
}
inline bool HuntingRevealFinalNotify_CmdId_Parse(
    const ::std::string& name, HuntingRevealFinalNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingRevealFinalNotify_CmdId>(
    HuntingRevealFinalNotify_CmdId_descriptor(), name, value);
}
enum HuntingSuccessNotify_CmdId {
  HuntingSuccessNotify_CmdId_NONE = 0,
  HuntingSuccessNotify_CmdId_CMD_ID = 4349,
  HuntingSuccessNotify_CmdId_ENET_CHANNEL_ID = 0,
  HuntingSuccessNotify_CmdId_ENET_IS_RELIABLE = 1,
  HuntingSuccessNotify_CmdId_HuntingSuccessNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingSuccessNotify_CmdId_HuntingSuccessNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingSuccessNotify_CmdId_IsValid(int value);
const HuntingSuccessNotify_CmdId HuntingSuccessNotify_CmdId_CmdId_MIN = HuntingSuccessNotify_CmdId_NONE;
const HuntingSuccessNotify_CmdId HuntingSuccessNotify_CmdId_CmdId_MAX = HuntingSuccessNotify_CmdId_CMD_ID;
const int HuntingSuccessNotify_CmdId_CmdId_ARRAYSIZE = HuntingSuccessNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingSuccessNotify_CmdId_descriptor();
inline const ::std::string& HuntingSuccessNotify_CmdId_Name(HuntingSuccessNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingSuccessNotify_CmdId_descriptor(), value);
}
inline bool HuntingSuccessNotify_CmdId_Parse(
    const ::std::string& name, HuntingSuccessNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingSuccessNotify_CmdId>(
    HuntingSuccessNotify_CmdId_descriptor(), name, value);
}
enum HuntingFailNotify_CmdId {
  HuntingFailNotify_CmdId_NONE = 0,
  HuntingFailNotify_CmdId_CMD_ID = 4320,
  HuntingFailNotify_CmdId_ENET_CHANNEL_ID = 0,
  HuntingFailNotify_CmdId_ENET_IS_RELIABLE = 1,
  HuntingFailNotify_CmdId_HuntingFailNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingFailNotify_CmdId_HuntingFailNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingFailNotify_CmdId_IsValid(int value);
const HuntingFailNotify_CmdId HuntingFailNotify_CmdId_CmdId_MIN = HuntingFailNotify_CmdId_NONE;
const HuntingFailNotify_CmdId HuntingFailNotify_CmdId_CmdId_MAX = HuntingFailNotify_CmdId_CMD_ID;
const int HuntingFailNotify_CmdId_CmdId_ARRAYSIZE = HuntingFailNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingFailNotify_CmdId_descriptor();
inline const ::std::string& HuntingFailNotify_CmdId_Name(HuntingFailNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingFailNotify_CmdId_descriptor(), value);
}
inline bool HuntingFailNotify_CmdId_Parse(
    const ::std::string& name, HuntingFailNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingFailNotify_CmdId>(
    HuntingFailNotify_CmdId_descriptor(), name, value);
}
enum HuntingOngoingNotify_CmdId {
  HuntingOngoingNotify_CmdId_NONE = 0,
  HuntingOngoingNotify_CmdId_CMD_ID = 4345,
  HuntingOngoingNotify_CmdId_ENET_CHANNEL_ID = 0,
  HuntingOngoingNotify_CmdId_ENET_IS_RELIABLE = 1,
  HuntingOngoingNotify_CmdId_HuntingOngoingNotify_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingOngoingNotify_CmdId_HuntingOngoingNotify_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingOngoingNotify_CmdId_IsValid(int value);
const HuntingOngoingNotify_CmdId HuntingOngoingNotify_CmdId_CmdId_MIN = HuntingOngoingNotify_CmdId_NONE;
const HuntingOngoingNotify_CmdId HuntingOngoingNotify_CmdId_CmdId_MAX = HuntingOngoingNotify_CmdId_CMD_ID;
const int HuntingOngoingNotify_CmdId_CmdId_ARRAYSIZE = HuntingOngoingNotify_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingOngoingNotify_CmdId_descriptor();
inline const ::std::string& HuntingOngoingNotify_CmdId_Name(HuntingOngoingNotify_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingOngoingNotify_CmdId_descriptor(), value);
}
inline bool HuntingOngoingNotify_CmdId_Parse(
    const ::std::string& name, HuntingOngoingNotify_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingOngoingNotify_CmdId>(
    HuntingOngoingNotify_CmdId_descriptor(), name, value);
}
enum HuntingGiveUpReq_CmdId {
  HuntingGiveUpReq_CmdId_NONE = 0,
  HuntingGiveUpReq_CmdId_CMD_ID = 4341,
  HuntingGiveUpReq_CmdId_ENET_CHANNEL_ID = 0,
  HuntingGiveUpReq_CmdId_ENET_IS_RELIABLE = 1,
  HuntingGiveUpReq_CmdId_IS_ALLOW_CLIENT = 1,
  HuntingGiveUpReq_CmdId_HuntingGiveUpReq_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingGiveUpReq_CmdId_HuntingGiveUpReq_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingGiveUpReq_CmdId_IsValid(int value);
const HuntingGiveUpReq_CmdId HuntingGiveUpReq_CmdId_CmdId_MIN = HuntingGiveUpReq_CmdId_NONE;
const HuntingGiveUpReq_CmdId HuntingGiveUpReq_CmdId_CmdId_MAX = HuntingGiveUpReq_CmdId_CMD_ID;
const int HuntingGiveUpReq_CmdId_CmdId_ARRAYSIZE = HuntingGiveUpReq_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingGiveUpReq_CmdId_descriptor();
inline const ::std::string& HuntingGiveUpReq_CmdId_Name(HuntingGiveUpReq_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingGiveUpReq_CmdId_descriptor(), value);
}
inline bool HuntingGiveUpReq_CmdId_Parse(
    const ::std::string& name, HuntingGiveUpReq_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingGiveUpReq_CmdId>(
    HuntingGiveUpReq_CmdId_descriptor(), name, value);
}
enum HuntingGiveUpRsp_CmdId {
  HuntingGiveUpRsp_CmdId_NONE = 0,
  HuntingGiveUpRsp_CmdId_CMD_ID = 4342,
  HuntingGiveUpRsp_CmdId_ENET_CHANNEL_ID = 0,
  HuntingGiveUpRsp_CmdId_ENET_IS_RELIABLE = 1,
  HuntingGiveUpRsp_CmdId_HuntingGiveUpRsp_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HuntingGiveUpRsp_CmdId_HuntingGiveUpRsp_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HuntingGiveUpRsp_CmdId_IsValid(int value);
const HuntingGiveUpRsp_CmdId HuntingGiveUpRsp_CmdId_CmdId_MIN = HuntingGiveUpRsp_CmdId_NONE;
const HuntingGiveUpRsp_CmdId HuntingGiveUpRsp_CmdId_CmdId_MAX = HuntingGiveUpRsp_CmdId_CMD_ID;
const int HuntingGiveUpRsp_CmdId_CmdId_ARRAYSIZE = HuntingGiveUpRsp_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* HuntingGiveUpRsp_CmdId_descriptor();
inline const ::std::string& HuntingGiveUpRsp_CmdId_Name(HuntingGiveUpRsp_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    HuntingGiveUpRsp_CmdId_descriptor(), value);
}
inline bool HuntingGiveUpRsp_CmdId_Parse(
    const ::std::string& name, HuntingGiveUpRsp_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HuntingGiveUpRsp_CmdId>(
    HuntingGiveUpRsp_CmdId_descriptor(), name, value);
}
// ===================================================================

class HuntingPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingPair) */ {
 public:
  HuntingPair();
  virtual ~HuntingPair();

  HuntingPair(const HuntingPair& from);

  inline HuntingPair& operator=(const HuntingPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingPair(HuntingPair&& from) noexcept
    : HuntingPair() {
    *this = ::std::move(from);
  }

  inline HuntingPair& operator=(HuntingPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingPair& default_instance();

  static inline const HuntingPair* internal_default_instance() {
    return reinterpret_cast<const HuntingPair*>(
               &_HuntingPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HuntingPair* other);
  friend void swap(HuntingPair& a, HuntingPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingPair* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingPair& from);
  void MergeFrom(const HuntingPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 monster_config_id = 4;
  void clear_monster_config_id();
  static const int kMonsterConfigIdFieldNumber = 4;
  ::google::protobuf::uint32 monster_config_id() const;
  void set_monster_config_id(::google::protobuf::uint32 value);

  // uint32 refresh_id = 9;
  void clear_refresh_id();
  static const int kRefreshIdFieldNumber = 9;
  ::google::protobuf::uint32 refresh_id() const;
  void set_refresh_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 monster_config_id_;
  ::google::protobuf::uint32 refresh_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeHuntingOfferReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeHuntingOfferReq) */ {
 public:
  TakeHuntingOfferReq();
  virtual ~TakeHuntingOfferReq();

  TakeHuntingOfferReq(const TakeHuntingOfferReq& from);

  inline TakeHuntingOfferReq& operator=(const TakeHuntingOfferReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeHuntingOfferReq(TakeHuntingOfferReq&& from) noexcept
    : TakeHuntingOfferReq() {
    *this = ::std::move(from);
  }

  inline TakeHuntingOfferReq& operator=(TakeHuntingOfferReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeHuntingOfferReq& default_instance();

  static inline const TakeHuntingOfferReq* internal_default_instance() {
    return reinterpret_cast<const TakeHuntingOfferReq*>(
               &_TakeHuntingOfferReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TakeHuntingOfferReq* other);
  friend void swap(TakeHuntingOfferReq& a, TakeHuntingOfferReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeHuntingOfferReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeHuntingOfferReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeHuntingOfferReq& from);
  void MergeFrom(const TakeHuntingOfferReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeHuntingOfferReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TakeHuntingOfferReq_CmdId CmdId;
  static const CmdId NONE =
    TakeHuntingOfferReq_CmdId_NONE;
  static const CmdId CMD_ID =
    TakeHuntingOfferReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    TakeHuntingOfferReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    TakeHuntingOfferReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    TakeHuntingOfferReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return TakeHuntingOfferReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    TakeHuntingOfferReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    TakeHuntingOfferReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    TakeHuntingOfferReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return TakeHuntingOfferReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return TakeHuntingOfferReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return TakeHuntingOfferReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 14;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 14;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // uint32 city_id = 4;
  void clear_city_id();
  static const int kCityIdFieldNumber = 4;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeHuntingOfferReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeHuntingOfferRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeHuntingOfferRsp) */ {
 public:
  TakeHuntingOfferRsp();
  virtual ~TakeHuntingOfferRsp();

  TakeHuntingOfferRsp(const TakeHuntingOfferRsp& from);

  inline TakeHuntingOfferRsp& operator=(const TakeHuntingOfferRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeHuntingOfferRsp(TakeHuntingOfferRsp&& from) noexcept
    : TakeHuntingOfferRsp() {
    *this = ::std::move(from);
  }

  inline TakeHuntingOfferRsp& operator=(TakeHuntingOfferRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeHuntingOfferRsp& default_instance();

  static inline const TakeHuntingOfferRsp* internal_default_instance() {
    return reinterpret_cast<const TakeHuntingOfferRsp*>(
               &_TakeHuntingOfferRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TakeHuntingOfferRsp* other);
  friend void swap(TakeHuntingOfferRsp& a, TakeHuntingOfferRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeHuntingOfferRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeHuntingOfferRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeHuntingOfferRsp& from);
  void MergeFrom(const TakeHuntingOfferRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeHuntingOfferRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TakeHuntingOfferRsp_CmdId CmdId;
  static const CmdId NONE =
    TakeHuntingOfferRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    TakeHuntingOfferRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    TakeHuntingOfferRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    TakeHuntingOfferRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return TakeHuntingOfferRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    TakeHuntingOfferRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    TakeHuntingOfferRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    TakeHuntingOfferRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return TakeHuntingOfferRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return TakeHuntingOfferRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return TakeHuntingOfferRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 13;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 13;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // int32 retcode = 3;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 city_id = 14;
  void clear_city_id();
  static const int kCityIdFieldNumber = 14;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeHuntingOfferRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingOfferData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingOfferData) */ {
 public:
  HuntingOfferData();
  virtual ~HuntingOfferData();

  HuntingOfferData(const HuntingOfferData& from);

  inline HuntingOfferData& operator=(const HuntingOfferData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingOfferData(HuntingOfferData&& from) noexcept
    : HuntingOfferData() {
    *this = ::std::move(from);
  }

  inline HuntingOfferData& operator=(HuntingOfferData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingOfferData& default_instance();

  static inline const HuntingOfferData* internal_default_instance() {
    return reinterpret_cast<const HuntingOfferData*>(
               &_HuntingOfferData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HuntingOfferData* other);
  friend void swap(HuntingOfferData& a, HuntingOfferData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingOfferData* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingOfferData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingOfferData& from);
  void MergeFrom(const HuntingOfferData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingOfferData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 4;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 4;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // .proto.HuntingOfferState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::proto::HuntingOfferState state() const;
  void set_state(::proto::HuntingOfferState value);

  // uint32 city_id = 8;
  void clear_city_id();
  static const int kCityIdFieldNumber = 8;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingOfferData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  int state_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCityHuntingOfferReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetCityHuntingOfferReq) */ {
 public:
  GetCityHuntingOfferReq();
  virtual ~GetCityHuntingOfferReq();

  GetCityHuntingOfferReq(const GetCityHuntingOfferReq& from);

  inline GetCityHuntingOfferReq& operator=(const GetCityHuntingOfferReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCityHuntingOfferReq(GetCityHuntingOfferReq&& from) noexcept
    : GetCityHuntingOfferReq() {
    *this = ::std::move(from);
  }

  inline GetCityHuntingOfferReq& operator=(GetCityHuntingOfferReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCityHuntingOfferReq& default_instance();

  static inline const GetCityHuntingOfferReq* internal_default_instance() {
    return reinterpret_cast<const GetCityHuntingOfferReq*>(
               &_GetCityHuntingOfferReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetCityHuntingOfferReq* other);
  friend void swap(GetCityHuntingOfferReq& a, GetCityHuntingOfferReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCityHuntingOfferReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCityHuntingOfferReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCityHuntingOfferReq& from);
  void MergeFrom(const GetCityHuntingOfferReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCityHuntingOfferReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetCityHuntingOfferReq_CmdId CmdId;
  static const CmdId NONE =
    GetCityHuntingOfferReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetCityHuntingOfferReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetCityHuntingOfferReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetCityHuntingOfferReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetCityHuntingOfferReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetCityHuntingOfferReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetCityHuntingOfferReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetCityHuntingOfferReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetCityHuntingOfferReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetCityHuntingOfferReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetCityHuntingOfferReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetCityHuntingOfferReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 city_id = 9;
  void clear_city_id();
  static const int kCityIdFieldNumber = 9;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetCityHuntingOfferReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCityHuntingOfferRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetCityHuntingOfferRsp) */ {
 public:
  GetCityHuntingOfferRsp();
  virtual ~GetCityHuntingOfferRsp();

  GetCityHuntingOfferRsp(const GetCityHuntingOfferRsp& from);

  inline GetCityHuntingOfferRsp& operator=(const GetCityHuntingOfferRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCityHuntingOfferRsp(GetCityHuntingOfferRsp&& from) noexcept
    : GetCityHuntingOfferRsp() {
    *this = ::std::move(from);
  }

  inline GetCityHuntingOfferRsp& operator=(GetCityHuntingOfferRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCityHuntingOfferRsp& default_instance();

  static inline const GetCityHuntingOfferRsp* internal_default_instance() {
    return reinterpret_cast<const GetCityHuntingOfferRsp*>(
               &_GetCityHuntingOfferRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetCityHuntingOfferRsp* other);
  friend void swap(GetCityHuntingOfferRsp& a, GetCityHuntingOfferRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCityHuntingOfferRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCityHuntingOfferRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCityHuntingOfferRsp& from);
  void MergeFrom(const GetCityHuntingOfferRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCityHuntingOfferRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetCityHuntingOfferRsp_CmdId CmdId;
  static const CmdId NONE =
    GetCityHuntingOfferRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetCityHuntingOfferRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetCityHuntingOfferRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetCityHuntingOfferRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetCityHuntingOfferRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetCityHuntingOfferRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetCityHuntingOfferRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetCityHuntingOfferRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetCityHuntingOfferRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetCityHuntingOfferRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetCityHuntingOfferRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.HuntingOfferData hunting_offer_list = 13;
  int hunting_offer_list_size() const;
  void clear_hunting_offer_list();
  static const int kHuntingOfferListFieldNumber = 13;
  const ::proto::HuntingOfferData& hunting_offer_list(int index) const;
  ::proto::HuntingOfferData* mutable_hunting_offer_list(int index);
  ::proto::HuntingOfferData* add_hunting_offer_list();
  ::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData >*
      mutable_hunting_offer_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData >&
      hunting_offer_list() const;

  // .proto.HuntingPair ongoing_hunting_pair = 8;
  bool has_ongoing_hunting_pair() const;
  void clear_ongoing_hunting_pair();
  static const int kOngoingHuntingPairFieldNumber = 8;
  const ::proto::HuntingPair& ongoing_hunting_pair() const;
  ::proto::HuntingPair* mutable_ongoing_hunting_pair();
  ::proto::HuntingPair* release_ongoing_hunting_pair();
  void set_allocated_ongoing_hunting_pair(::proto::HuntingPair* ongoing_hunting_pair);

  // uint32 cur_week_finished_count = 1;
  void clear_cur_week_finished_count();
  static const int kCurWeekFinishedCountFieldNumber = 1;
  ::google::protobuf::uint32 cur_week_finished_count() const;
  void set_cur_week_finished_count(::google::protobuf::uint32 value);

  // uint32 city_id = 2;
  void clear_city_id();
  static const int kCityIdFieldNumber = 2;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 next_refresh_time = 4;
  void clear_next_refresh_time();
  static const int kNextRefreshTimeFieldNumber = 4;
  ::google::protobuf::uint32 next_refresh_time() const;
  void set_next_refresh_time(::google::protobuf::uint32 value);

  // int32 retcode = 9;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 9;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetCityHuntingOfferRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData > hunting_offer_list_;
  ::proto::HuntingPair* ongoing_hunting_pair_;
  ::google::protobuf::uint32 cur_week_finished_count_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 next_refresh_time_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetHuntingOfferRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetHuntingOfferRewardReq) */ {
 public:
  GetHuntingOfferRewardReq();
  virtual ~GetHuntingOfferRewardReq();

  GetHuntingOfferRewardReq(const GetHuntingOfferRewardReq& from);

  inline GetHuntingOfferRewardReq& operator=(const GetHuntingOfferRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHuntingOfferRewardReq(GetHuntingOfferRewardReq&& from) noexcept
    : GetHuntingOfferRewardReq() {
    *this = ::std::move(from);
  }

  inline GetHuntingOfferRewardReq& operator=(GetHuntingOfferRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHuntingOfferRewardReq& default_instance();

  static inline const GetHuntingOfferRewardReq* internal_default_instance() {
    return reinterpret_cast<const GetHuntingOfferRewardReq*>(
               &_GetHuntingOfferRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetHuntingOfferRewardReq* other);
  friend void swap(GetHuntingOfferRewardReq& a, GetHuntingOfferRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHuntingOfferRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetHuntingOfferRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetHuntingOfferRewardReq& from);
  void MergeFrom(const GetHuntingOfferRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetHuntingOfferRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetHuntingOfferRewardReq_CmdId CmdId;
  static const CmdId NONE =
    GetHuntingOfferRewardReq_CmdId_NONE;
  static const CmdId CMD_ID =
    GetHuntingOfferRewardReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetHuntingOfferRewardReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetHuntingOfferRewardReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    GetHuntingOfferRewardReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return GetHuntingOfferRewardReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetHuntingOfferRewardReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetHuntingOfferRewardReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetHuntingOfferRewardReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetHuntingOfferRewardReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetHuntingOfferRewardReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetHuntingOfferRewardReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 4;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 4;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // uint32 city_id = 6;
  void clear_city_id();
  static const int kCityIdFieldNumber = 6;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetHuntingOfferRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetHuntingOfferRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetHuntingOfferRewardRsp) */ {
 public:
  GetHuntingOfferRewardRsp();
  virtual ~GetHuntingOfferRewardRsp();

  GetHuntingOfferRewardRsp(const GetHuntingOfferRewardRsp& from);

  inline GetHuntingOfferRewardRsp& operator=(const GetHuntingOfferRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHuntingOfferRewardRsp(GetHuntingOfferRewardRsp&& from) noexcept
    : GetHuntingOfferRewardRsp() {
    *this = ::std::move(from);
  }

  inline GetHuntingOfferRewardRsp& operator=(GetHuntingOfferRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHuntingOfferRewardRsp& default_instance();

  static inline const GetHuntingOfferRewardRsp* internal_default_instance() {
    return reinterpret_cast<const GetHuntingOfferRewardRsp*>(
               &_GetHuntingOfferRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetHuntingOfferRewardRsp* other);
  friend void swap(GetHuntingOfferRewardRsp& a, GetHuntingOfferRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHuntingOfferRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetHuntingOfferRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetHuntingOfferRewardRsp& from);
  void MergeFrom(const GetHuntingOfferRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetHuntingOfferRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GetHuntingOfferRewardRsp_CmdId CmdId;
  static const CmdId NONE =
    GetHuntingOfferRewardRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    GetHuntingOfferRewardRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    GetHuntingOfferRewardRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    GetHuntingOfferRewardRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return GetHuntingOfferRewardRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    GetHuntingOfferRewardRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    GetHuntingOfferRewardRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    GetHuntingOfferRewardRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return GetHuntingOfferRewardRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return GetHuntingOfferRewardRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return GetHuntingOfferRewardRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 14;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 14;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // uint32 city_id = 3;
  void clear_city_id();
  static const int kCityIdFieldNumber = 3;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetHuntingOfferRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingStartNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingStartNotify) */ {
 public:
  HuntingStartNotify();
  virtual ~HuntingStartNotify();

  HuntingStartNotify(const HuntingStartNotify& from);

  inline HuntingStartNotify& operator=(const HuntingStartNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingStartNotify(HuntingStartNotify&& from) noexcept
    : HuntingStartNotify() {
    *this = ::std::move(from);
  }

  inline HuntingStartNotify& operator=(HuntingStartNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingStartNotify& default_instance();

  static inline const HuntingStartNotify* internal_default_instance() {
    return reinterpret_cast<const HuntingStartNotify*>(
               &_HuntingStartNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(HuntingStartNotify* other);
  friend void swap(HuntingStartNotify& a, HuntingStartNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingStartNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingStartNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingStartNotify& from);
  void MergeFrom(const HuntingStartNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingStartNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingStartNotify_CmdId CmdId;
  static const CmdId NONE =
    HuntingStartNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingStartNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingStartNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingStartNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingStartNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingStartNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingStartNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingStartNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingStartNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingStartNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingStartNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 3;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 3;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // .proto.Vector clue_position = 4;
  bool has_clue_position() const;
  void clear_clue_position();
  static const int kCluePositionFieldNumber = 4;
  const ::proto::Vector& clue_position() const;
  ::proto::Vector* mutable_clue_position();
  ::proto::Vector* release_clue_position();
  void set_allocated_clue_position(::proto::Vector* clue_position);

  // bool is_final = 8;
  void clear_is_final();
  static const int kIsFinalFieldNumber = 8;
  bool is_final() const;
  void set_is_final(bool value);

  // uint32 fail_time = 15;
  void clear_fail_time();
  static const int kFailTimeFieldNumber = 15;
  ::google::protobuf::uint32 fail_time() const;
  void set_fail_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingStartNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  ::proto::Vector* clue_position_;
  bool is_final_;
  ::google::protobuf::uint32 fail_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingRevealClueNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingRevealClueNotify) */ {
 public:
  HuntingRevealClueNotify();
  virtual ~HuntingRevealClueNotify();

  HuntingRevealClueNotify(const HuntingRevealClueNotify& from);

  inline HuntingRevealClueNotify& operator=(const HuntingRevealClueNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingRevealClueNotify(HuntingRevealClueNotify&& from) noexcept
    : HuntingRevealClueNotify() {
    *this = ::std::move(from);
  }

  inline HuntingRevealClueNotify& operator=(HuntingRevealClueNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingRevealClueNotify& default_instance();

  static inline const HuntingRevealClueNotify* internal_default_instance() {
    return reinterpret_cast<const HuntingRevealClueNotify*>(
               &_HuntingRevealClueNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(HuntingRevealClueNotify* other);
  friend void swap(HuntingRevealClueNotify& a, HuntingRevealClueNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingRevealClueNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingRevealClueNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingRevealClueNotify& from);
  void MergeFrom(const HuntingRevealClueNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingRevealClueNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingRevealClueNotify_CmdId CmdId;
  static const CmdId NONE =
    HuntingRevealClueNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingRevealClueNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingRevealClueNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingRevealClueNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingRevealClueNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingRevealClueNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingRevealClueNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingRevealClueNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingRevealClueNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingRevealClueNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingRevealClueNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.Vector clue_position = 4;
  bool has_clue_position() const;
  void clear_clue_position();
  static const int kCluePositionFieldNumber = 4;
  const ::proto::Vector& clue_position() const;
  ::proto::Vector* mutable_clue_position();
  ::proto::Vector* release_clue_position();
  void set_allocated_clue_position(::proto::Vector* clue_position);

  // .proto.HuntingPair hunting_pair = 12;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 12;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // uint32 finish_clue_count = 5;
  void clear_finish_clue_count();
  static const int kFinishClueCountFieldNumber = 5;
  ::google::protobuf::uint32 finish_clue_count() const;
  void set_finish_clue_count(::google::protobuf::uint32 value);

  // uint32 finished_group_id = 7;
  void clear_finished_group_id();
  static const int kFinishedGroupIdFieldNumber = 7;
  ::google::protobuf::uint32 finished_group_id() const;
  void set_finished_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingRevealClueNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Vector* clue_position_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::uint32 finish_clue_count_;
  ::google::protobuf::uint32 finished_group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingRevealFinalNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingRevealFinalNotify) */ {
 public:
  HuntingRevealFinalNotify();
  virtual ~HuntingRevealFinalNotify();

  HuntingRevealFinalNotify(const HuntingRevealFinalNotify& from);

  inline HuntingRevealFinalNotify& operator=(const HuntingRevealFinalNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingRevealFinalNotify(HuntingRevealFinalNotify&& from) noexcept
    : HuntingRevealFinalNotify() {
    *this = ::std::move(from);
  }

  inline HuntingRevealFinalNotify& operator=(HuntingRevealFinalNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingRevealFinalNotify& default_instance();

  static inline const HuntingRevealFinalNotify* internal_default_instance() {
    return reinterpret_cast<const HuntingRevealFinalNotify*>(
               &_HuntingRevealFinalNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(HuntingRevealFinalNotify* other);
  friend void swap(HuntingRevealFinalNotify& a, HuntingRevealFinalNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingRevealFinalNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingRevealFinalNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingRevealFinalNotify& from);
  void MergeFrom(const HuntingRevealFinalNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingRevealFinalNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingRevealFinalNotify_CmdId CmdId;
  static const CmdId NONE =
    HuntingRevealFinalNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingRevealFinalNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingRevealFinalNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingRevealFinalNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingRevealFinalNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingRevealFinalNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingRevealFinalNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingRevealFinalNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingRevealFinalNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingRevealFinalNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingRevealFinalNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.Vector final_position = 2;
  bool has_final_position() const;
  void clear_final_position();
  static const int kFinalPositionFieldNumber = 2;
  const ::proto::Vector& final_position() const;
  ::proto::Vector* mutable_final_position();
  ::proto::Vector* release_final_position();
  void set_allocated_final_position(::proto::Vector* final_position);

  // .proto.HuntingPair hunting_pair = 11;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 11;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // uint32 finished_group_id = 5;
  void clear_finished_group_id();
  static const int kFinishedGroupIdFieldNumber = 5;
  ::google::protobuf::uint32 finished_group_id() const;
  void set_finished_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingRevealFinalNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Vector* final_position_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::uint32 finished_group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingSuccessNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingSuccessNotify) */ {
 public:
  HuntingSuccessNotify();
  virtual ~HuntingSuccessNotify();

  HuntingSuccessNotify(const HuntingSuccessNotify& from);

  inline HuntingSuccessNotify& operator=(const HuntingSuccessNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingSuccessNotify(HuntingSuccessNotify&& from) noexcept
    : HuntingSuccessNotify() {
    *this = ::std::move(from);
  }

  inline HuntingSuccessNotify& operator=(HuntingSuccessNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingSuccessNotify& default_instance();

  static inline const HuntingSuccessNotify* internal_default_instance() {
    return reinterpret_cast<const HuntingSuccessNotify*>(
               &_HuntingSuccessNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(HuntingSuccessNotify* other);
  friend void swap(HuntingSuccessNotify& a, HuntingSuccessNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingSuccessNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingSuccessNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingSuccessNotify& from);
  void MergeFrom(const HuntingSuccessNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingSuccessNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingSuccessNotify_CmdId CmdId;
  static const CmdId NONE =
    HuntingSuccessNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingSuccessNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingSuccessNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingSuccessNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingSuccessNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingSuccessNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingSuccessNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingSuccessNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingSuccessNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingSuccessNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingSuccessNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 4;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 4;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // @@protoc_insertion_point(class_scope:proto.HuntingSuccessNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingFailNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingFailNotify) */ {
 public:
  HuntingFailNotify();
  virtual ~HuntingFailNotify();

  HuntingFailNotify(const HuntingFailNotify& from);

  inline HuntingFailNotify& operator=(const HuntingFailNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingFailNotify(HuntingFailNotify&& from) noexcept
    : HuntingFailNotify() {
    *this = ::std::move(from);
  }

  inline HuntingFailNotify& operator=(HuntingFailNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingFailNotify& default_instance();

  static inline const HuntingFailNotify* internal_default_instance() {
    return reinterpret_cast<const HuntingFailNotify*>(
               &_HuntingFailNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(HuntingFailNotify* other);
  friend void swap(HuntingFailNotify& a, HuntingFailNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingFailNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingFailNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingFailNotify& from);
  void MergeFrom(const HuntingFailNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingFailNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingFailNotify_CmdId CmdId;
  static const CmdId NONE =
    HuntingFailNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingFailNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingFailNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingFailNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingFailNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingFailNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingFailNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingFailNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingFailNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingFailNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingFailNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 12;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 12;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // @@protoc_insertion_point(class_scope:proto.HuntingFailNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingOngoingNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingOngoingNotify) */ {
 public:
  HuntingOngoingNotify();
  virtual ~HuntingOngoingNotify();

  HuntingOngoingNotify(const HuntingOngoingNotify& from);

  inline HuntingOngoingNotify& operator=(const HuntingOngoingNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingOngoingNotify(HuntingOngoingNotify&& from) noexcept
    : HuntingOngoingNotify() {
    *this = ::std::move(from);
  }

  inline HuntingOngoingNotify& operator=(HuntingOngoingNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingOngoingNotify& default_instance();

  static inline const HuntingOngoingNotify* internal_default_instance() {
    return reinterpret_cast<const HuntingOngoingNotify*>(
               &_HuntingOngoingNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(HuntingOngoingNotify* other);
  friend void swap(HuntingOngoingNotify& a, HuntingOngoingNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingOngoingNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingOngoingNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingOngoingNotify& from);
  void MergeFrom(const HuntingOngoingNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingOngoingNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingOngoingNotify_CmdId CmdId;
  static const CmdId NONE =
    HuntingOngoingNotify_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingOngoingNotify_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingOngoingNotify_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingOngoingNotify_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingOngoingNotify_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingOngoingNotify_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingOngoingNotify_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingOngoingNotify_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingOngoingNotify_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingOngoingNotify_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingOngoingNotify_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.Vector next_position = 3;
  bool has_next_position() const;
  void clear_next_position();
  static const int kNextPositionFieldNumber = 3;
  const ::proto::Vector& next_position() const;
  ::proto::Vector* mutable_next_position();
  ::proto::Vector* release_next_position();
  void set_allocated_next_position(::proto::Vector* next_position);

  // .proto.HuntingPair hunting_pair = 15;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 15;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // bool is_started = 8;
  void clear_is_started();
  static const int kIsStartedFieldNumber = 8;
  bool is_started() const;
  void set_is_started(bool value);

  // bool is_final = 14;
  void clear_is_final();
  static const int kIsFinalFieldNumber = 14;
  bool is_final() const;
  void set_is_final(bool value);

  // uint32 fail_time = 7;
  void clear_fail_time();
  static const int kFailTimeFieldNumber = 7;
  ::google::protobuf::uint32 fail_time() const;
  void set_fail_time(::google::protobuf::uint32 value);

  // uint32 finish_clue_count = 10;
  void clear_finish_clue_count();
  static const int kFinishClueCountFieldNumber = 10;
  ::google::protobuf::uint32 finish_clue_count() const;
  void set_finish_clue_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingOngoingNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Vector* next_position_;
  ::proto::HuntingPair* hunting_pair_;
  bool is_started_;
  bool is_final_;
  ::google::protobuf::uint32 fail_time_;
  ::google::protobuf::uint32 finish_clue_count_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingGiveUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingGiveUpReq) */ {
 public:
  HuntingGiveUpReq();
  virtual ~HuntingGiveUpReq();

  HuntingGiveUpReq(const HuntingGiveUpReq& from);

  inline HuntingGiveUpReq& operator=(const HuntingGiveUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingGiveUpReq(HuntingGiveUpReq&& from) noexcept
    : HuntingGiveUpReq() {
    *this = ::std::move(from);
  }

  inline HuntingGiveUpReq& operator=(HuntingGiveUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingGiveUpReq& default_instance();

  static inline const HuntingGiveUpReq* internal_default_instance() {
    return reinterpret_cast<const HuntingGiveUpReq*>(
               &_HuntingGiveUpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(HuntingGiveUpReq* other);
  friend void swap(HuntingGiveUpReq& a, HuntingGiveUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingGiveUpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingGiveUpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingGiveUpReq& from);
  void MergeFrom(const HuntingGiveUpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingGiveUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingGiveUpReq_CmdId CmdId;
  static const CmdId NONE =
    HuntingGiveUpReq_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingGiveUpReq_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingGiveUpReq_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingGiveUpReq_CmdId_ENET_IS_RELIABLE;
  static const CmdId IS_ALLOW_CLIENT =
    HuntingGiveUpReq_CmdId_IS_ALLOW_CLIENT;
  static inline bool CmdId_IsValid(int value) {
    return HuntingGiveUpReq_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingGiveUpReq_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingGiveUpReq_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingGiveUpReq_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingGiveUpReq_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingGiveUpReq_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingGiveUpReq_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 1;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 1;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // @@protoc_insertion_point(class_scope:proto.HuntingGiveUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuntingGiveUpRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HuntingGiveUpRsp) */ {
 public:
  HuntingGiveUpRsp();
  virtual ~HuntingGiveUpRsp();

  HuntingGiveUpRsp(const HuntingGiveUpRsp& from);

  inline HuntingGiveUpRsp& operator=(const HuntingGiveUpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuntingGiveUpRsp(HuntingGiveUpRsp&& from) noexcept
    : HuntingGiveUpRsp() {
    *this = ::std::move(from);
  }

  inline HuntingGiveUpRsp& operator=(HuntingGiveUpRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuntingGiveUpRsp& default_instance();

  static inline const HuntingGiveUpRsp* internal_default_instance() {
    return reinterpret_cast<const HuntingGiveUpRsp*>(
               &_HuntingGiveUpRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(HuntingGiveUpRsp* other);
  friend void swap(HuntingGiveUpRsp& a, HuntingGiveUpRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuntingGiveUpRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HuntingGiveUpRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuntingGiveUpRsp& from);
  void MergeFrom(const HuntingGiveUpRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuntingGiveUpRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HuntingGiveUpRsp_CmdId CmdId;
  static const CmdId NONE =
    HuntingGiveUpRsp_CmdId_NONE;
  static const CmdId CMD_ID =
    HuntingGiveUpRsp_CmdId_CMD_ID;
  static const CmdId ENET_CHANNEL_ID =
    HuntingGiveUpRsp_CmdId_ENET_CHANNEL_ID;
  static const CmdId ENET_IS_RELIABLE =
    HuntingGiveUpRsp_CmdId_ENET_IS_RELIABLE;
  static inline bool CmdId_IsValid(int value) {
    return HuntingGiveUpRsp_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    HuntingGiveUpRsp_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    HuntingGiveUpRsp_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    HuntingGiveUpRsp_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return HuntingGiveUpRsp_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return HuntingGiveUpRsp_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return HuntingGiveUpRsp_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.HuntingPair hunting_pair = 4;
  bool has_hunting_pair() const;
  void clear_hunting_pair();
  static const int kHuntingPairFieldNumber = 4;
  const ::proto::HuntingPair& hunting_pair() const;
  ::proto::HuntingPair* mutable_hunting_pair();
  ::proto::HuntingPair* release_hunting_pair();
  void set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair);

  // int32 retcode = 3;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.HuntingGiveUpRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::HuntingPair* hunting_pair_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fhunting_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HuntingPair

// uint32 refresh_id = 9;
inline void HuntingPair::clear_refresh_id() {
  refresh_id_ = 0u;
}
inline ::google::protobuf::uint32 HuntingPair::refresh_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingPair.refresh_id)
  return refresh_id_;
}
inline void HuntingPair::set_refresh_id(::google::protobuf::uint32 value) {
  
  refresh_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingPair.refresh_id)
}

// uint32 monster_config_id = 4;
inline void HuntingPair::clear_monster_config_id() {
  monster_config_id_ = 0u;
}
inline ::google::protobuf::uint32 HuntingPair::monster_config_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingPair.monster_config_id)
  return monster_config_id_;
}
inline void HuntingPair::set_monster_config_id(::google::protobuf::uint32 value) {
  
  monster_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingPair.monster_config_id)
}

// -------------------------------------------------------------------

// TakeHuntingOfferReq

// .proto.HuntingPair hunting_pair = 14;
inline bool TakeHuntingOfferReq::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void TakeHuntingOfferReq::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& TakeHuntingOfferReq::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferReq.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* TakeHuntingOfferReq::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.TakeHuntingOfferReq.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* TakeHuntingOfferReq::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.TakeHuntingOfferReq.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void TakeHuntingOfferReq::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TakeHuntingOfferReq.hunting_pair)
}

// uint32 city_id = 4;
inline void TakeHuntingOfferReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeHuntingOfferReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferReq.city_id)
  return city_id_;
}
inline void TakeHuntingOfferReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeHuntingOfferReq.city_id)
}

// -------------------------------------------------------------------

// TakeHuntingOfferRsp

// .proto.HuntingPair hunting_pair = 13;
inline bool TakeHuntingOfferRsp::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void TakeHuntingOfferRsp::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& TakeHuntingOfferRsp::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferRsp.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* TakeHuntingOfferRsp::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.TakeHuntingOfferRsp.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* TakeHuntingOfferRsp::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.TakeHuntingOfferRsp.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void TakeHuntingOfferRsp::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TakeHuntingOfferRsp.hunting_pair)
}

// uint32 city_id = 14;
inline void TakeHuntingOfferRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeHuntingOfferRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferRsp.city_id)
  return city_id_;
}
inline void TakeHuntingOfferRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeHuntingOfferRsp.city_id)
}

// int32 retcode = 3;
inline void TakeHuntingOfferRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeHuntingOfferRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferRsp.retcode)
  return retcode_;
}
inline void TakeHuntingOfferRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeHuntingOfferRsp.retcode)
}

// -------------------------------------------------------------------

// HuntingOfferData

// .proto.HuntingPair hunting_pair = 4;
inline bool HuntingOfferData::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingOfferData::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingOfferData::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingOfferData.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingOfferData::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingOfferData.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingOfferData::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingOfferData.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingOfferData::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingOfferData.hunting_pair)
}

// uint32 city_id = 8;
inline void HuntingOfferData::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 HuntingOfferData::city_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOfferData.city_id)
  return city_id_;
}
inline void HuntingOfferData::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOfferData.city_id)
}

// .proto.HuntingOfferState state = 1;
inline void HuntingOfferData::clear_state() {
  state_ = 0;
}
inline ::proto::HuntingOfferState HuntingOfferData::state() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOfferData.state)
  return static_cast< ::proto::HuntingOfferState >(state_);
}
inline void HuntingOfferData::set_state(::proto::HuntingOfferState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOfferData.state)
}

// -------------------------------------------------------------------

// GetCityHuntingOfferReq

// uint32 city_id = 9;
inline void GetCityHuntingOfferReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 GetCityHuntingOfferReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferReq.city_id)
  return city_id_;
}
inline void GetCityHuntingOfferReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferReq.city_id)
}

// -------------------------------------------------------------------

// GetCityHuntingOfferRsp

// int32 retcode = 9;
inline void GetCityHuntingOfferRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetCityHuntingOfferRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.retcode)
  return retcode_;
}
inline void GetCityHuntingOfferRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.retcode)
}

// repeated .proto.HuntingOfferData hunting_offer_list = 13;
inline int GetCityHuntingOfferRsp::hunting_offer_list_size() const {
  return hunting_offer_list_.size();
}
inline void GetCityHuntingOfferRsp::clear_hunting_offer_list() {
  hunting_offer_list_.Clear();
}
inline const ::proto::HuntingOfferData& GetCityHuntingOfferRsp::hunting_offer_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_.Get(index);
}
inline ::proto::HuntingOfferData* GetCityHuntingOfferRsp::mutable_hunting_offer_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_.Mutable(index);
}
inline ::proto::HuntingOfferData* GetCityHuntingOfferRsp::add_hunting_offer_list() {
  // @@protoc_insertion_point(field_add:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData >*
GetCityHuntingOfferRsp::mutable_hunting_offer_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return &hunting_offer_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData >&
GetCityHuntingOfferRsp::hunting_offer_list() const {
  // @@protoc_insertion_point(field_list:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_;
}

// uint32 city_id = 2;
inline void GetCityHuntingOfferRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 GetCityHuntingOfferRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.city_id)
  return city_id_;
}
inline void GetCityHuntingOfferRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.city_id)
}

// .proto.HuntingPair ongoing_hunting_pair = 8;
inline bool GetCityHuntingOfferRsp::has_ongoing_hunting_pair() const {
  return this != internal_default_instance() && ongoing_hunting_pair_ != NULL;
}
inline void GetCityHuntingOfferRsp::clear_ongoing_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && ongoing_hunting_pair_ != NULL) delete ongoing_hunting_pair_;
  ongoing_hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& GetCityHuntingOfferRsp::ongoing_hunting_pair() const {
  const ::proto::HuntingPair* p = ongoing_hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* GetCityHuntingOfferRsp::mutable_ongoing_hunting_pair() {
  
  if (ongoing_hunting_pair_ == NULL) {
    ongoing_hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
  return ongoing_hunting_pair_;
}
inline ::proto::HuntingPair* GetCityHuntingOfferRsp::release_ongoing_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
  
  ::proto::HuntingPair* temp = ongoing_hunting_pair_;
  ongoing_hunting_pair_ = NULL;
  return temp;
}
inline void GetCityHuntingOfferRsp::set_allocated_ongoing_hunting_pair(::proto::HuntingPair* ongoing_hunting_pair) {
  delete ongoing_hunting_pair_;
  ongoing_hunting_pair_ = ongoing_hunting_pair;
  if (ongoing_hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
}

// uint32 cur_week_finished_count = 1;
inline void GetCityHuntingOfferRsp::clear_cur_week_finished_count() {
  cur_week_finished_count_ = 0u;
}
inline ::google::protobuf::uint32 GetCityHuntingOfferRsp::cur_week_finished_count() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.cur_week_finished_count)
  return cur_week_finished_count_;
}
inline void GetCityHuntingOfferRsp::set_cur_week_finished_count(::google::protobuf::uint32 value) {
  
  cur_week_finished_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.cur_week_finished_count)
}

// uint32 next_refresh_time = 4;
inline void GetCityHuntingOfferRsp::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
inline ::google::protobuf::uint32 GetCityHuntingOfferRsp::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.next_refresh_time)
  return next_refresh_time_;
}
inline void GetCityHuntingOfferRsp::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.next_refresh_time)
}

// -------------------------------------------------------------------

// GetHuntingOfferRewardReq

// uint32 city_id = 6;
inline void GetHuntingOfferRewardReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 GetHuntingOfferRewardReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardReq.city_id)
  return city_id_;
}
inline void GetHuntingOfferRewardReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetHuntingOfferRewardReq.city_id)
}

// .proto.HuntingPair hunting_pair = 4;
inline bool GetHuntingOfferRewardReq::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void GetHuntingOfferRewardReq::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& GetHuntingOfferRewardReq::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardReq.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* GetHuntingOfferRewardReq::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetHuntingOfferRewardReq.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* GetHuntingOfferRewardReq::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.GetHuntingOfferRewardReq.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void GetHuntingOfferRewardReq::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetHuntingOfferRewardReq.hunting_pair)
}

// -------------------------------------------------------------------

// GetHuntingOfferRewardRsp

// .proto.HuntingPair hunting_pair = 14;
inline bool GetHuntingOfferRewardRsp::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void GetHuntingOfferRewardRsp::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& GetHuntingOfferRewardRsp::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardRsp.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* GetHuntingOfferRewardRsp::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetHuntingOfferRewardRsp.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* GetHuntingOfferRewardRsp::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.GetHuntingOfferRewardRsp.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void GetHuntingOfferRewardRsp::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetHuntingOfferRewardRsp.hunting_pair)
}

// uint32 city_id = 3;
inline void GetHuntingOfferRewardRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 GetHuntingOfferRewardRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardRsp.city_id)
  return city_id_;
}
inline void GetHuntingOfferRewardRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetHuntingOfferRewardRsp.city_id)
}

// int32 retcode = 12;
inline void GetHuntingOfferRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetHuntingOfferRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardRsp.retcode)
  return retcode_;
}
inline void GetHuntingOfferRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetHuntingOfferRewardRsp.retcode)
}

// -------------------------------------------------------------------

// HuntingStartNotify

// .proto.Vector clue_position = 4;
inline bool HuntingStartNotify::has_clue_position() const {
  return this != internal_default_instance() && clue_position_ != NULL;
}
inline void HuntingStartNotify::clear_clue_position() {
  if (GetArenaNoVirtual() == NULL && clue_position_ != NULL) delete clue_position_;
  clue_position_ = NULL;
}
inline const ::proto::Vector& HuntingStartNotify::clue_position() const {
  const ::proto::Vector* p = clue_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.clue_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* HuntingStartNotify::mutable_clue_position() {
  
  if (clue_position_ == NULL) {
    clue_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingStartNotify.clue_position)
  return clue_position_;
}
inline ::proto::Vector* HuntingStartNotify::release_clue_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingStartNotify.clue_position)
  
  ::proto::Vector* temp = clue_position_;
  clue_position_ = NULL;
  return temp;
}
inline void HuntingStartNotify::set_allocated_clue_position(::proto::Vector* clue_position) {
  delete clue_position_;
  clue_position_ = clue_position;
  if (clue_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingStartNotify.clue_position)
}

// uint32 fail_time = 15;
inline void HuntingStartNotify::clear_fail_time() {
  fail_time_ = 0u;
}
inline ::google::protobuf::uint32 HuntingStartNotify::fail_time() const {
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.fail_time)
  return fail_time_;
}
inline void HuntingStartNotify::set_fail_time(::google::protobuf::uint32 value) {
  
  fail_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingStartNotify.fail_time)
}

// .proto.HuntingPair hunting_pair = 3;
inline bool HuntingStartNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingStartNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingStartNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingStartNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingStartNotify.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingStartNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingStartNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingStartNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingStartNotify.hunting_pair)
}

// bool is_final = 8;
inline void HuntingStartNotify::clear_is_final() {
  is_final_ = false;
}
inline bool HuntingStartNotify::is_final() const {
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.is_final)
  return is_final_;
}
inline void HuntingStartNotify::set_is_final(bool value) {
  
  is_final_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingStartNotify.is_final)
}

// -------------------------------------------------------------------

// HuntingRevealClueNotify

// uint32 finish_clue_count = 5;
inline void HuntingRevealClueNotify::clear_finish_clue_count() {
  finish_clue_count_ = 0u;
}
inline ::google::protobuf::uint32 HuntingRevealClueNotify::finish_clue_count() const {
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.finish_clue_count)
  return finish_clue_count_;
}
inline void HuntingRevealClueNotify::set_finish_clue_count(::google::protobuf::uint32 value) {
  
  finish_clue_count_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingRevealClueNotify.finish_clue_count)
}

// .proto.Vector clue_position = 4;
inline bool HuntingRevealClueNotify::has_clue_position() const {
  return this != internal_default_instance() && clue_position_ != NULL;
}
inline void HuntingRevealClueNotify::clear_clue_position() {
  if (GetArenaNoVirtual() == NULL && clue_position_ != NULL) delete clue_position_;
  clue_position_ = NULL;
}
inline const ::proto::Vector& HuntingRevealClueNotify::clue_position() const {
  const ::proto::Vector* p = clue_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.clue_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* HuntingRevealClueNotify::mutable_clue_position() {
  
  if (clue_position_ == NULL) {
    clue_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealClueNotify.clue_position)
  return clue_position_;
}
inline ::proto::Vector* HuntingRevealClueNotify::release_clue_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealClueNotify.clue_position)
  
  ::proto::Vector* temp = clue_position_;
  clue_position_ = NULL;
  return temp;
}
inline void HuntingRevealClueNotify::set_allocated_clue_position(::proto::Vector* clue_position) {
  delete clue_position_;
  clue_position_ = clue_position;
  if (clue_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealClueNotify.clue_position)
}

// .proto.HuntingPair hunting_pair = 12;
inline bool HuntingRevealClueNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingRevealClueNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingRevealClueNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingRevealClueNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealClueNotify.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingRevealClueNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealClueNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingRevealClueNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealClueNotify.hunting_pair)
}

// uint32 finished_group_id = 7;
inline void HuntingRevealClueNotify::clear_finished_group_id() {
  finished_group_id_ = 0u;
}
inline ::google::protobuf::uint32 HuntingRevealClueNotify::finished_group_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.finished_group_id)
  return finished_group_id_;
}
inline void HuntingRevealClueNotify::set_finished_group_id(::google::protobuf::uint32 value) {
  
  finished_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingRevealClueNotify.finished_group_id)
}

// -------------------------------------------------------------------

// HuntingRevealFinalNotify

// uint32 finished_group_id = 5;
inline void HuntingRevealFinalNotify::clear_finished_group_id() {
  finished_group_id_ = 0u;
}
inline ::google::protobuf::uint32 HuntingRevealFinalNotify::finished_group_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingRevealFinalNotify.finished_group_id)
  return finished_group_id_;
}
inline void HuntingRevealFinalNotify::set_finished_group_id(::google::protobuf::uint32 value) {
  
  finished_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingRevealFinalNotify.finished_group_id)
}

// .proto.HuntingPair hunting_pair = 11;
inline bool HuntingRevealFinalNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingRevealFinalNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingRevealFinalNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealFinalNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingRevealFinalNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealFinalNotify.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingRevealFinalNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealFinalNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingRevealFinalNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealFinalNotify.hunting_pair)
}

// .proto.Vector final_position = 2;
inline bool HuntingRevealFinalNotify::has_final_position() const {
  return this != internal_default_instance() && final_position_ != NULL;
}
inline void HuntingRevealFinalNotify::clear_final_position() {
  if (GetArenaNoVirtual() == NULL && final_position_ != NULL) delete final_position_;
  final_position_ = NULL;
}
inline const ::proto::Vector& HuntingRevealFinalNotify::final_position() const {
  const ::proto::Vector* p = final_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealFinalNotify.final_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* HuntingRevealFinalNotify::mutable_final_position() {
  
  if (final_position_ == NULL) {
    final_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealFinalNotify.final_position)
  return final_position_;
}
inline ::proto::Vector* HuntingRevealFinalNotify::release_final_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealFinalNotify.final_position)
  
  ::proto::Vector* temp = final_position_;
  final_position_ = NULL;
  return temp;
}
inline void HuntingRevealFinalNotify::set_allocated_final_position(::proto::Vector* final_position) {
  delete final_position_;
  final_position_ = final_position;
  if (final_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealFinalNotify.final_position)
}

// -------------------------------------------------------------------

// HuntingSuccessNotify

// .proto.HuntingPair hunting_pair = 4;
inline bool HuntingSuccessNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingSuccessNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingSuccessNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingSuccessNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingSuccessNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingSuccessNotify.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingSuccessNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingSuccessNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingSuccessNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingSuccessNotify.hunting_pair)
}

// -------------------------------------------------------------------

// HuntingFailNotify

// .proto.HuntingPair hunting_pair = 12;
inline bool HuntingFailNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingFailNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingFailNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingFailNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingFailNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingFailNotify.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingFailNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingFailNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingFailNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingFailNotify.hunting_pair)
}

// -------------------------------------------------------------------

// HuntingOngoingNotify

// .proto.HuntingPair hunting_pair = 15;
inline bool HuntingOngoingNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingOngoingNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingOngoingNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingOngoingNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingOngoingNotify.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingOngoingNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingOngoingNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingOngoingNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingOngoingNotify.hunting_pair)
}

// bool is_started = 8;
inline void HuntingOngoingNotify::clear_is_started() {
  is_started_ = false;
}
inline bool HuntingOngoingNotify::is_started() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.is_started)
  return is_started_;
}
inline void HuntingOngoingNotify::set_is_started(bool value) {
  
  is_started_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.is_started)
}

// .proto.Vector next_position = 3;
inline bool HuntingOngoingNotify::has_next_position() const {
  return this != internal_default_instance() && next_position_ != NULL;
}
inline void HuntingOngoingNotify::clear_next_position() {
  if (GetArenaNoVirtual() == NULL && next_position_ != NULL) delete next_position_;
  next_position_ = NULL;
}
inline const ::proto::Vector& HuntingOngoingNotify::next_position() const {
  const ::proto::Vector* p = next_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.next_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* HuntingOngoingNotify::mutable_next_position() {
  
  if (next_position_ == NULL) {
    next_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingOngoingNotify.next_position)
  return next_position_;
}
inline ::proto::Vector* HuntingOngoingNotify::release_next_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingOngoingNotify.next_position)
  
  ::proto::Vector* temp = next_position_;
  next_position_ = NULL;
  return temp;
}
inline void HuntingOngoingNotify::set_allocated_next_position(::proto::Vector* next_position) {
  delete next_position_;
  next_position_ = next_position;
  if (next_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingOngoingNotify.next_position)
}

// uint32 finish_clue_count = 10;
inline void HuntingOngoingNotify::clear_finish_clue_count() {
  finish_clue_count_ = 0u;
}
inline ::google::protobuf::uint32 HuntingOngoingNotify::finish_clue_count() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.finish_clue_count)
  return finish_clue_count_;
}
inline void HuntingOngoingNotify::set_finish_clue_count(::google::protobuf::uint32 value) {
  
  finish_clue_count_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.finish_clue_count)
}

// bool is_final = 14;
inline void HuntingOngoingNotify::clear_is_final() {
  is_final_ = false;
}
inline bool HuntingOngoingNotify::is_final() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.is_final)
  return is_final_;
}
inline void HuntingOngoingNotify::set_is_final(bool value) {
  
  is_final_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.is_final)
}

// uint32 fail_time = 7;
inline void HuntingOngoingNotify::clear_fail_time() {
  fail_time_ = 0u;
}
inline ::google::protobuf::uint32 HuntingOngoingNotify::fail_time() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.fail_time)
  return fail_time_;
}
inline void HuntingOngoingNotify::set_fail_time(::google::protobuf::uint32 value) {
  
  fail_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.fail_time)
}

// -------------------------------------------------------------------

// HuntingGiveUpReq

// .proto.HuntingPair hunting_pair = 1;
inline bool HuntingGiveUpReq::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingGiveUpReq::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingGiveUpReq::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingGiveUpReq.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingGiveUpReq::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingGiveUpReq.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingGiveUpReq::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingGiveUpReq.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingGiveUpReq::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingGiveUpReq.hunting_pair)
}

// -------------------------------------------------------------------

// HuntingGiveUpRsp

// int32 retcode = 3;
inline void HuntingGiveUpRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 HuntingGiveUpRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HuntingGiveUpRsp.retcode)
  return retcode_;
}
inline void HuntingGiveUpRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingGiveUpRsp.retcode)
}

// .proto.HuntingPair hunting_pair = 4;
inline bool HuntingGiveUpRsp::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
inline void HuntingGiveUpRsp::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
inline const ::proto::HuntingPair& HuntingGiveUpRsp::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingGiveUpRsp.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
inline ::proto::HuntingPair* HuntingGiveUpRsp::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingGiveUpRsp.hunting_pair)
  return hunting_pair_;
}
inline ::proto::HuntingPair* HuntingGiveUpRsp::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingGiveUpRsp.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
inline void HuntingGiveUpRsp::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingGiveUpRsp.hunting_pair)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::TakeHuntingOfferReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TakeHuntingOfferReq_CmdId>() {
  return ::proto::TakeHuntingOfferReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::TakeHuntingOfferRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TakeHuntingOfferRsp_CmdId>() {
  return ::proto::TakeHuntingOfferRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetCityHuntingOfferReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetCityHuntingOfferReq_CmdId>() {
  return ::proto::GetCityHuntingOfferReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetCityHuntingOfferRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetCityHuntingOfferRsp_CmdId>() {
  return ::proto::GetCityHuntingOfferRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetHuntingOfferRewardReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetHuntingOfferRewardReq_CmdId>() {
  return ::proto::GetHuntingOfferRewardReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::GetHuntingOfferRewardRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GetHuntingOfferRewardRsp_CmdId>() {
  return ::proto::GetHuntingOfferRewardRsp_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingStartNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingStartNotify_CmdId>() {
  return ::proto::HuntingStartNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingRevealClueNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingRevealClueNotify_CmdId>() {
  return ::proto::HuntingRevealClueNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingRevealFinalNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingRevealFinalNotify_CmdId>() {
  return ::proto::HuntingRevealFinalNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingSuccessNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingSuccessNotify_CmdId>() {
  return ::proto::HuntingSuccessNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingFailNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingFailNotify_CmdId>() {
  return ::proto::HuntingFailNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingOngoingNotify_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingOngoingNotify_CmdId>() {
  return ::proto::HuntingOngoingNotify_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingGiveUpReq_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingGiveUpReq_CmdId>() {
  return ::proto::HuntingGiveUpReq_CmdId_descriptor();
}
template <> struct is_proto_enum< ::proto::HuntingGiveUpRsp_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HuntingGiveUpRsp_CmdId>() {
  return ::proto::HuntingGiveUpRsp_CmdId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fhunting_2eproto__INCLUDED
