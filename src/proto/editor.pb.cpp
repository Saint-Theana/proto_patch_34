// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "editor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class MapInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MapInfo>
     _instance;
} _MapInfo_default_instance_;
class CellInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CellInfo>
     _instance;
} _CellInfo_default_instance_;

namespace protobuf_editor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, minx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, maxx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, minz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, maxz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, cells_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellInfo, y_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MapInfo)},
  { 10, -1, sizeof(CellInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CellInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "editor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MapInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MapInfo_default_instance_);_CellInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CellInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014editor.proto\022\005proto\"a\n\007MapInfo\022\014\n\004minx"
      "\030\001 \001(\005\022\014\n\004maxx\030\002 \001(\005\022\014\n\004minz\030\003 \001(\005\022\014\n\004ma"
      "xz\030\004 \001(\005\022\036\n\005cells\030\005 \003(\0132\017.proto.CellInfo"
      "\"@\n\010CellInfo\022)\n\004type\030\001 \001(\0162\033.proto.Scene"
      "SurfaceMaterial\022\t\n\001y\030\002 \001(\005*k\n\024SceneSurfa"
      "ceMaterial\022\013\n\007Invalid\020\000\022\t\n\005Grass\020\001\022\010\n\004Di"
      "rt\020\002\022\010\n\004Rock\020\003\022\010\n\004Snow\020\004\022\t\n\005Water\020\005\022\010\n\004T"
      "ile\020\006\022\010\n\004Sand\020\007B\nZ\010./;protob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "editor.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_editor_2eproto

const ::google::protobuf::EnumDescriptor* SceneSurfaceMaterial_descriptor() {
  protobuf_editor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_editor_2eproto::file_level_enum_descriptors[0];
}
bool SceneSurfaceMaterial_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapInfo::kMinxFieldNumber;
const int MapInfo::kMaxxFieldNumber;
const int MapInfo::kMinzFieldNumber;
const int MapInfo::kMaxzFieldNumber;
const int MapInfo::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapInfo::MapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_editor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cells_(from.cells_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minx_, &from.minx_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxz_) -
    reinterpret_cast<char*>(&minx_)) + sizeof(maxz_));
  // @@protoc_insertion_point(copy_constructor:proto.MapInfo)
}

void MapInfo::SharedCtor() {
  ::memset(&minx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxz_) -
      reinterpret_cast<char*>(&minx_)) + sizeof(maxz_));
  _cached_size_ = 0;
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:proto.MapInfo)
  SharedDtor();
}

void MapInfo::SharedDtor() {
}

void MapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  protobuf_editor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_editor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapInfo& MapInfo::default_instance() {
  protobuf_editor_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapInfo* MapInfo::New(::google::protobuf::Arena* arena) const {
  MapInfo* n = new MapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  ::memset(&minx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxz_) -
      reinterpret_cast<char*>(&minx_)) + sizeof(maxz_));
  _internal_metadata_.Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 minx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxz = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.CellInfo cells = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MapInfo)
  return false;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minx = 1;
  if (this->minx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minx(), output);
  }

  // int32 maxx = 2;
  if (this->maxx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxx(), output);
  }

  // int32 minz = 3;
  if (this->minz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minz(), output);
  }

  // int32 maxz = 4;
  if (this->maxz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxz(), output);
  }

  // repeated .proto.CellInfo cells = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cells(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MapInfo)
}

::google::protobuf::uint8* MapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minx = 1;
  if (this->minx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minx(), target);
  }

  // int32 maxx = 2;
  if (this->maxx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxx(), target);
  }

  // int32 minz = 3;
  if (this->minz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minz(), target);
  }

  // int32 maxz = 4;
  if (this->maxz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxz(), target);
  }

  // repeated .proto.CellInfo cells = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->cells(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.CellInfo cells = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells(static_cast<int>(i)));
    }
  }

  // int32 minx = 1;
  if (this->minx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minx());
  }

  // int32 maxx = 2;
  if (this->maxx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxx());
  }

  // int32 minz = 3;
  if (this->minz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minz());
  }

  // int32 maxz = 4;
  if (this->maxz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MapInfo)
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (from.minx() != 0) {
    set_minx(from.minx());
  }
  if (from.maxx() != 0) {
    set_maxx(from.maxx());
  }
  if (from.minz() != 0) {
    set_minz(from.minz());
  }
  if (from.maxz() != 0) {
    set_maxz(from.maxz());
  }
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  cells_.InternalSwap(&other->cells_);
  swap(minx_, other->minx_);
  swap(maxx_, other->maxx_);
  swap(minz_, other->minz_);
  swap(maxz_, other->maxz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_editor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_editor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapInfo

// int32 minx = 1;
void MapInfo::clear_minx() {
  minx_ = 0;
}
::google::protobuf::int32 MapInfo::minx() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.minx)
  return minx_;
}
void MapInfo::set_minx(::google::protobuf::int32 value) {
  
  minx_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.minx)
}

// int32 maxx = 2;
void MapInfo::clear_maxx() {
  maxx_ = 0;
}
::google::protobuf::int32 MapInfo::maxx() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.maxx)
  return maxx_;
}
void MapInfo::set_maxx(::google::protobuf::int32 value) {
  
  maxx_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.maxx)
}

// int32 minz = 3;
void MapInfo::clear_minz() {
  minz_ = 0;
}
::google::protobuf::int32 MapInfo::minz() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.minz)
  return minz_;
}
void MapInfo::set_minz(::google::protobuf::int32 value) {
  
  minz_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.minz)
}

// int32 maxz = 4;
void MapInfo::clear_maxz() {
  maxz_ = 0;
}
::google::protobuf::int32 MapInfo::maxz() const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.maxz)
  return maxz_;
}
void MapInfo::set_maxz(::google::protobuf::int32 value) {
  
  maxz_ = value;
  // @@protoc_insertion_point(field_set:proto.MapInfo.maxz)
}

// repeated .proto.CellInfo cells = 5;
int MapInfo::cells_size() const {
  return cells_.size();
}
void MapInfo::clear_cells() {
  cells_.Clear();
}
const ::proto::CellInfo& MapInfo::cells(int index) const {
  // @@protoc_insertion_point(field_get:proto.MapInfo.cells)
  return cells_.Get(index);
}
::proto::CellInfo* MapInfo::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MapInfo.cells)
  return cells_.Mutable(index);
}
::proto::CellInfo* MapInfo::add_cells() {
  // @@protoc_insertion_point(field_add:proto.MapInfo.cells)
  return cells_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::CellInfo >*
MapInfo::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:proto.MapInfo.cells)
  return &cells_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::CellInfo >&
MapInfo::cells() const {
  // @@protoc_insertion_point(field_list:proto.MapInfo.cells)
  return cells_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CellInfo::kTypeFieldNumber;
const int CellInfo::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CellInfo::CellInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_editor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CellInfo)
}
CellInfo::CellInfo(const CellInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.CellInfo)
}

void CellInfo::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(y_));
  _cached_size_ = 0;
}

CellInfo::~CellInfo() {
  // @@protoc_insertion_point(destructor:proto.CellInfo)
  SharedDtor();
}

void CellInfo::SharedDtor() {
}

void CellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellInfo::descriptor() {
  protobuf_editor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_editor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CellInfo& CellInfo::default_instance() {
  protobuf_editor_2eproto::InitDefaults();
  return *internal_default_instance();
}

CellInfo* CellInfo::New(::google::protobuf::Arena* arena) const {
  CellInfo* n = new CellInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CellInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool CellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CellInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SceneSurfaceMaterial type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::SceneSurfaceMaterial >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CellInfo)
  return false;
#undef DO_
}

void CellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SceneSurfaceMaterial type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CellInfo)
}

::google::protobuf::uint8* CellInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SceneSurfaceMaterial type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CellInfo)
  return target;
}

size_t CellInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CellInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.SceneSurfaceMaterial type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CellInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CellInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CellInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CellInfo)
    MergeFrom(*source);
  }
}

void CellInfo::MergeFrom(const CellInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void CellInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellInfo::CopyFrom(const CellInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellInfo::IsInitialized() const {
  return true;
}

void CellInfo::Swap(CellInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CellInfo::InternalSwap(CellInfo* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CellInfo::GetMetadata() const {
  protobuf_editor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_editor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CellInfo

// .proto.SceneSurfaceMaterial type = 1;
void CellInfo::clear_type() {
  type_ = 0;
}
::proto::SceneSurfaceMaterial CellInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.CellInfo.type)
  return static_cast< ::proto::SceneSurfaceMaterial >(type_);
}
void CellInfo::set_type(::proto::SceneSurfaceMaterial value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.CellInfo.type)
}

// int32 y = 2;
void CellInfo::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 CellInfo::y() const {
  // @@protoc_insertion_point(field_get:proto.CellInfo.y)
  return y_;
}
void CellInfo::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.CellInfo.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
